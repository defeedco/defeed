/* tslint:disable */
/* eslint-disable */
/**
 * Pulse Feed Aggregation API
 * API for managing feed sources and retrieving aggregated content
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'source_uid': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'title': string;
    /**
     * One-line short plain text summary.
     * @type {string}
     * @memberof Activity
     */
    'short_summary': string;
    /**
     * One-paragraph markdown summary.
     * @type {string}
     * @memberof Activity
     */
    'full_summary': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'image_url': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'created_at': string;
    /**
     * Similarity score (0-1) when using semantic search
     * @type {number}
     * @memberof Activity
     */
    'similarity'?: number;
}
/**
 * 
 * @export
 * @interface CreateSourceRequest
 */
export interface CreateSourceRequest {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequest
     */
    'type': SourceType;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CreateSourceRequest
     */
    'config': { [key: string]: any; };
}


/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'uid': string;
    /**
     * 
     * @type {SourceType}
     * @memberof Source
     */
    'type': SourceType;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'url': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SourceType = {
    MastodonAccount: 'mastodon_account',
    MastodonTag: 'mastodon_tag',
    HackernewsPosts: 'hackernews_posts',
    RedditSubreddit: 'reddit_subreddit',
    LobstersTag: 'lobsters_tag',
    LobstersFeed: 'lobsters_feed',
    RssFeed: 'rss_feed',
    GithubReleases: 'github_releases',
    GithubIssues: 'github_issues',
    ChangedetectionWebsite: 'changedetection_website'
} as const;

export type SourceType = typeof SourceType[keyof typeof SourceType];



/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllActivities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchActivities: async (query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/activities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (minSimilarity !== undefined) {
                localVarQueryParameter['min_similarity'] = minSimilarity;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllActivities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllActivities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.listAllActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchActivities(query, sources, minSimilarity, limit, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.searchActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllActivities(options?: RawAxiosRequestConfig): AxiosPromise<Array<Activity>> {
            return localVarFp.listAllActivities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Activity>> {
            return localVarFp.searchActivities(query, sources, minSimilarity, limit, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * 
     * @summary List all activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public listAllActivities(options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).listAllActivities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search activities
     * @param {string} [query] Semantic search query text
     * @param {string} [sources] Filter by source UIDs (comma-separated)
     * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
     * @param {number} [limit] Maximum number of results to return
     * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).searchActivities(query, sources, minSimilarity, limit, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchActivitiesSortByEnum = {
    Similarity: 'similarity',
    CreatedDate: 'created_date'
} as const;
export type SearchActivitiesSortByEnum = typeof SearchActivitiesSortByEnum[keyof typeof SearchActivitiesSortByEnum];


/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get page HTML
         * @param {string} config Base64 encoded JSON string for feed config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (config: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'config' is not null or undefined
            assertParamExists('getPage', 'config', config)
            const localVarPath = `/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (config !== undefined) {
                localVarQueryParameter['config'] = config;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get page HTML
         * @param {string} config Base64 encoded JSON string for feed config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(config: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(config, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PagesApi.getPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get page HTML
         * @param {string} config Base64 encoded JSON string for feed config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(config: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getPage(config, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
    /**
     * 
     * @summary Get page HTML
     * @param {string} config Base64 encoded JSON string for feed config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public getPage(config: string, options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).getPage(config, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource: async (createSourceRequest: CreateSourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSourceRequest' is not null or undefined
            assertParamExists('createSource', 'createSourceRequest', createSourceRequest)
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteSource', 'uid', uid)
            const localVarPath = `/sources/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getSource', 'uid', uid)
            const localVarPath = `/sources/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSource(createSourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.createSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSource(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSource(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.deleteSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSource(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSource(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.getSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSources(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.listSources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.createSource(createSourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSource(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.getSource(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(options?: RawAxiosRequestConfig): AxiosPromise<Array<Source>> {
            return localVarFp.listSources(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new source
     * @param {CreateSourceRequest} createSourceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).createSource(createSourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete source
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public deleteSource(uid: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).deleteSource(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get source by UID
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public getSource(uid: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).getSource(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public listSources(options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).listSources(options).then((request) => request(this.axios, this.basePath));
    }
}



