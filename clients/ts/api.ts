/* tslint:disable */
/* eslint-disable */
/**
 * Pulse Feed Aggregation API
 * API for managing feed sources and retrieving aggregated content
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivitiesSummary
 */
export interface ActivitiesSummary {
    /**
     * A concise one-paragraph overview of the overall direction and themes
     * @type {string}
     * @memberof ActivitiesSummary
     */
    'overview': string;
    /**
     * List of key highlights extracted from the activities
     * @type {Array<ActivityHighlight>}
     * @memberof ActivitiesSummary
     */
    'highlights': Array<ActivityHighlight>;
}
/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'sourceUid': string;
    /**
     * 
     * @type {SourceType}
     * @memberof Activity
     */
    'sourceType': SourceType;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'title': string;
    /**
     * One-line short plain text summary.
     * @type {string}
     * @memberof Activity
     */
    'shortSummary': string;
    /**
     * One-paragraph markdown summary.
     * @type {string}
     * @memberof Activity
     */
    'fullSummary': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'createdAt': string;
    /**
     * Similarity score (0-1) when using semantic search
     * @type {number}
     * @memberof Activity
     */
    'similarity'?: number;
}


/**
 * 
 * @export
 * @interface ActivityHighlight
 */
export interface ActivityHighlight {
    /**
     * A concise highlight summarizing a key point
     * @type {string}
     * @memberof ActivityHighlight
     */
    'content': string;
    /**
     * List of activity IDs that contributed to this highlight
     * @type {Array<string>}
     * @memberof ActivityHighlight
     */
    'sourceActivityIds': Array<string>;
}
/**
 * 
 * @export
 * @interface ChangedetectionWebsiteConfig
 */
export interface ChangedetectionWebsiteConfig {
    /**
     * 
     * @type {string}
     * @memberof ChangedetectionWebsiteConfig
     */
    'watch': string;
    /**
     * 
     * @type {string}
     * @memberof ChangedetectionWebsiteConfig
     */
    'instanceUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangedetectionWebsiteConfig
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChangedetectionWebsiteConfig
     */
    'limit'?: number;
}
/**
 * @type CreateSourceRequest
 * @export
 */
export type CreateSourceRequest = { type: 'changedetectionWebsite' } & CreateSourceRequestChangedetectionWebsite | { type: 'githubIssues' } & CreateSourceRequestGithubIssues | { type: 'githubReleases' } & CreateSourceRequestGithubReleases | { type: 'hackernewsPosts' } & CreateSourceRequestHackernewsPosts | { type: 'lobstersFeed' } & CreateSourceRequestLobstersFeed | { type: 'lobstersTag' } & CreateSourceRequestLobstersTag | { type: 'mastodonAccount' } & CreateSourceRequestMastodonAccount | { type: 'mastodonTag' } & CreateSourceRequestMastodonTag | { type: 'redditSubreddit' } & CreateSourceRequestRedditSubreddit | { type: 'rssFeed' } & CreateSourceRequestRssFeed;

/**
 * 
 * @export
 * @interface CreateSourceRequestChangedetectionWebsite
 */
export interface CreateSourceRequestChangedetectionWebsite {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestChangedetectionWebsite
     */
    'type': SourceType;
    /**
     * 
     * @type {ChangedetectionWebsiteConfig}
     * @memberof CreateSourceRequestChangedetectionWebsite
     */
    'changedetectionWebsite': ChangedetectionWebsiteConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestGithubIssues
 */
export interface CreateSourceRequestGithubIssues {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestGithubIssues
     */
    'type': SourceType;
    /**
     * 
     * @type {GithubIssuesConfig}
     * @memberof CreateSourceRequestGithubIssues
     */
    'githubIssues': GithubIssuesConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestGithubReleases
 */
export interface CreateSourceRequestGithubReleases {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestGithubReleases
     */
    'type': SourceType;
    /**
     * 
     * @type {GithubReleasesConfig}
     * @memberof CreateSourceRequestGithubReleases
     */
    'githubReleases': GithubReleasesConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestHackernewsPosts
 */
export interface CreateSourceRequestHackernewsPosts {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestHackernewsPosts
     */
    'type': SourceType;
    /**
     * 
     * @type {HackernewsPostsConfig}
     * @memberof CreateSourceRequestHackernewsPosts
     */
    'hackernewsPosts': HackernewsPostsConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestLobstersFeed
 */
export interface CreateSourceRequestLobstersFeed {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestLobstersFeed
     */
    'type': SourceType;
    /**
     * 
     * @type {LobstersFeedConfig}
     * @memberof CreateSourceRequestLobstersFeed
     */
    'lobstersFeed': LobstersFeedConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestLobstersTag
 */
export interface CreateSourceRequestLobstersTag {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestLobstersTag
     */
    'type': SourceType;
    /**
     * 
     * @type {LobstersTagConfig}
     * @memberof CreateSourceRequestLobstersTag
     */
    'lobstersTag': LobstersTagConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestMastodonAccount
 */
export interface CreateSourceRequestMastodonAccount {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestMastodonAccount
     */
    'type': SourceType;
    /**
     * 
     * @type {MastodonAccountConfig}
     * @memberof CreateSourceRequestMastodonAccount
     */
    'mastodonAccount': MastodonAccountConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestMastodonTag
 */
export interface CreateSourceRequestMastodonTag {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestMastodonTag
     */
    'type': SourceType;
    /**
     * 
     * @type {MastodonTagConfig}
     * @memberof CreateSourceRequestMastodonTag
     */
    'mastodonTag': MastodonTagConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestRedditSubreddit
 */
export interface CreateSourceRequestRedditSubreddit {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestRedditSubreddit
     */
    'type': SourceType;
    /**
     * 
     * @type {RedditSubredditConfig}
     * @memberof CreateSourceRequestRedditSubreddit
     */
    'redditSubreddit': RedditSubredditConfig;
}


/**
 * 
 * @export
 * @interface CreateSourceRequestRssFeed
 */
export interface CreateSourceRequestRssFeed {
    /**
     * 
     * @type {SourceType}
     * @memberof CreateSourceRequestRssFeed
     */
    'type': SourceType;
    /**
     * 
     * @type {RssFeedConfig}
     * @memberof CreateSourceRequestRssFeed
     */
    'rssFeed': RssFeedConfig;
}


/**
 * 
 * @export
 * @interface GithubIssuesConfig
 */
export interface GithubIssuesConfig {
    /**
     * owner/repo
     * @type {string}
     * @memberof GithubIssuesConfig
     */
    'repository': string;
    /**
     * 
     * @type {string}
     * @memberof GithubIssuesConfig
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface GithubReleasesConfig
 */
export interface GithubReleasesConfig {
    /**
     * owner/repo
     * @type {string}
     * @memberof GithubReleasesConfig
     */
    'repository': string;
    /**
     * 
     * @type {string}
     * @memberof GithubReleasesConfig
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GithubReleasesConfig
     */
    'includePrereleases'?: boolean;
}
/**
 * 
 * @export
 * @interface HackernewsPostsConfig
 */
export interface HackernewsPostsConfig {
    /**
     * 
     * @type {string}
     * @memberof HackernewsPostsConfig
     */
    'feedName': HackernewsPostsConfigFeedNameEnum;
}

export const HackernewsPostsConfigFeedNameEnum = {
    Top: 'top',
    New: 'new',
    Best: 'best'
} as const;

export type HackernewsPostsConfigFeedNameEnum = typeof HackernewsPostsConfigFeedNameEnum[keyof typeof HackernewsPostsConfigFeedNameEnum];

/**
 * 
 * @export
 * @interface LobstersFeedConfig
 */
export interface LobstersFeedConfig {
    /**
     * 
     * @type {string}
     * @memberof LobstersFeedConfig
     */
    'instanceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof LobstersFeedConfig
     */
    'customUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof LobstersFeedConfig
     */
    'feed': LobstersFeedConfigFeedEnum;
}

export const LobstersFeedConfigFeedEnum = {
    Hottest: 'hottest',
    Newest: 'newest'
} as const;

export type LobstersFeedConfigFeedEnum = typeof LobstersFeedConfigFeedEnum[keyof typeof LobstersFeedConfigFeedEnum];

/**
 * 
 * @export
 * @interface LobstersTagConfig
 */
export interface LobstersTagConfig {
    /**
     * 
     * @type {string}
     * @memberof LobstersTagConfig
     */
    'instanceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof LobstersTagConfig
     */
    'customUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof LobstersTagConfig
     */
    'tag': string;
}
/**
 * 
 * @export
 * @interface MastodonAccountConfig
 */
export interface MastodonAccountConfig {
    /**
     * 
     * @type {string}
     * @memberof MastodonAccountConfig
     */
    'instanceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MastodonAccountConfig
     */
    'account': string;
}
/**
 * 
 * @export
 * @interface MastodonTagConfig
 */
export interface MastodonTagConfig {
    /**
     * 
     * @type {string}
     * @memberof MastodonTagConfig
     */
    'instanceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MastodonTagConfig
     */
    'tag': string;
}
/**
 * 
 * @export
 * @interface RedditSubredditConfig
 */
export interface RedditSubredditConfig {
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfig
     */
    'subreddit': string;
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfig
     */
    'sortBy': RedditSubredditConfigSortByEnum;
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfig
     */
    'topPeriod': RedditSubredditConfigTopPeriodEnum;
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfig
     */
    'search'?: string;
    /**
     * 
     * @type {RedditSubredditConfigAuth}
     * @memberof RedditSubredditConfig
     */
    'auth'?: RedditSubredditConfigAuth;
}

export const RedditSubredditConfigSortByEnum = {
    Hot: 'hot',
    New: 'new',
    Top: 'top',
    Rising: 'rising'
} as const;

export type RedditSubredditConfigSortByEnum = typeof RedditSubredditConfigSortByEnum[keyof typeof RedditSubredditConfigSortByEnum];
export const RedditSubredditConfigTopPeriodEnum = {
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year',
    All: 'all'
} as const;

export type RedditSubredditConfigTopPeriodEnum = typeof RedditSubredditConfigTopPeriodEnum[keyof typeof RedditSubredditConfigTopPeriodEnum];

/**
 * 
 * @export
 * @interface RedditSubredditConfigAuth
 */
export interface RedditSubredditConfigAuth {
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfigAuth
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfigAuth
     */
    'ID'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedditSubredditConfigAuth
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @interface RssFeedConfig
 */
export interface RssFeedConfig {
    /**
     * 
     * @type {string}
     * @memberof RssFeedConfig
     */
    'url': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RssFeedConfig
     */
    'headers'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'uid': string;
    /**
     * 
     * @type {SourceType}
     * @memberof Source
     */
    'type': SourceType;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'url': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SourceType = {
    MastodonAccount: 'mastodonAccount',
    MastodonTag: 'mastodonTag',
    HackernewsPosts: 'hackernewsPosts',
    RedditSubreddit: 'redditSubreddit',
    LobstersTag: 'lobstersTag',
    LobstersFeed: 'lobstersFeed',
    RssFeed: 'rssFeed',
    GithubReleases: 'githubReleases',
    GithubIssues: 'githubIssues',
    ChangedetectionWebsite: 'changedetectionWebsite'
} as const;

export type SourceType = typeof SourceType[keyof typeof SourceType];



/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate an executive summary of multiple activities
         * @param {string} sources Comma-separated list of source UIDs where the activities are from
         * @param {string} [query] Semantic search query text. If provided, the summary will be based on the query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesSummary: async (sources: string, query?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sources' is not null or undefined
            assertParamExists('getActivitiesSummary', 'sources', sources)
            const localVarPath = `/activities/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllActivities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchActivities: async (query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/activities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (minSimilarity !== undefined) {
                localVarQueryParameter['minSimilarity'] = minSimilarity;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate an executive summary of multiple activities
         * @param {string} sources Comma-separated list of source UIDs where the activities are from
         * @param {string} [query] Semantic search query text. If provided, the summary will be based on the query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivitiesSummary(sources: string, query?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivitiesSummary(sources, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.getActivitiesSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllActivities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllActivities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.listAllActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Activity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchActivities(query, sources, minSimilarity, limit, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActivitiesApi.searchActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate an executive summary of multiple activities
         * @param {string} sources Comma-separated list of source UIDs where the activities are from
         * @param {string} [query] Semantic search query text. If provided, the summary will be based on the query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesSummary(sources: string, query?: string, options?: RawAxiosRequestConfig): AxiosPromise<ActivitiesSummary> {
            return localVarFp.getActivitiesSummary(sources, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllActivities(options?: RawAxiosRequestConfig): AxiosPromise<Array<Activity>> {
            return localVarFp.listAllActivities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search activities
         * @param {string} [query] Semantic search query text
         * @param {string} [sources] Filter by source UIDs (comma-separated)
         * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
         * @param {number} [limit] Maximum number of results to return
         * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Activity>> {
            return localVarFp.searchActivities(query, sources, minSimilarity, limit, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * 
     * @summary Generate an executive summary of multiple activities
     * @param {string} sources Comma-separated list of source UIDs where the activities are from
     * @param {string} [query] Semantic search query text. If provided, the summary will be based on the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivitiesSummary(sources: string, query?: string, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).getActivitiesSummary(sources, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public listAllActivities(options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).listAllActivities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search activities
     * @param {string} [query] Semantic search query text
     * @param {string} [sources] Filter by source UIDs (comma-separated)
     * @param {number} [minSimilarity] Minimum similarity score (0-1). Can only be used when &#x60;query&#x60; is provided.
     * @param {number} [limit] Maximum number of results to return
     * @param {SearchActivitiesSortByEnum} [sortBy] Field to sort results by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public searchActivities(query?: string, sources?: string, minSimilarity?: number, limit?: number, sortBy?: SearchActivitiesSortByEnum, options?: RawAxiosRequestConfig) {
        return ActivitiesApiFp(this.configuration).searchActivities(query, sources, minSimilarity, limit, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchActivitiesSortByEnum = {
    Similarity: 'similarity',
    CreationDate: 'creationDate'
} as const;
export type SearchActivitiesSortByEnum = typeof SearchActivitiesSortByEnum[keyof typeof SearchActivitiesSortByEnum];


/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource: async (createSourceRequest: CreateSourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSourceRequest' is not null or undefined
            assertParamExists('createSource', 'createSourceRequest', createSourceRequest)
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteSource', 'uid', uid)
            const localVarPath = `/sources/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getSource', 'uid', uid)
            const localVarPath = `/sources/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSource(createSourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.createSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSource(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSource(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.deleteSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSource(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSource(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.getSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSources(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.listSources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new source
         * @param {CreateSourceRequest} createSourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.createSource(createSourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete source
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSource(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.getSource(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(options?: RawAxiosRequestConfig): AxiosPromise<Array<Source>> {
            return localVarFp.listSources(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new source
     * @param {CreateSourceRequest} createSourceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public createSource(createSourceRequest: CreateSourceRequest, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).createSource(createSourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete source
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public deleteSource(uid: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).deleteSource(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get source by UID
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public getSource(uid: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).getSource(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public listSources(options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).listSources(options).then((request) => request(this.axios, this.basePath));
    }
}



