/* tslint:disable */
/* eslint-disable */
/**
 * Defeed API
 * Defeat your fragmented feeds ðŸ’ª
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivitiesListResponse
 */
export interface ActivitiesListResponse {
    /**
     * 
     * @type {Array<ActivityTopic>}
     * @memberof ActivitiesListResponse
     */
    'topics': Array<ActivityTopic>;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof ActivitiesListResponse
     */
    'results': Array<Activity>;
}
/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'sourceUid': string;
    /**
     * 
     * @type {SourceType}
     * @memberof Activity
     */
    'sourceType': SourceType;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'title': string;
    /**
     * One-line short plain text summary.
     * @type {string}
     * @memberof Activity
     */
    'shortSummary': string;
    /**
     * One-paragraph markdown summary.
     * @type {string}
     * @memberof Activity
     */
    'fullSummary': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'createdAt': string;
    /**
     * Similarity score (0-1) when using semantic search
     * @type {number}
     * @memberof Activity
     */
    'similarity'?: number;
}


/**
 * Time period to filter activities from. \'month\' means last month, \'week\' means last week, \'day\' means last day.
 * @export
 * @enum {string}
 */

export const ActivityPeriod = {
    All: 'all',
    Month: 'month',
    Week: 'week',
    Day: 'day'
} as const;

export type ActivityPeriod = typeof ActivityPeriod[keyof typeof ActivityPeriod];


/**
 * 
 * @export
 * @enum {string}
 */

export const ActivitySortBy = {
    Similarity: 'similarity',
    CreationDate: 'creationDate'
} as const;

export type ActivitySortBy = typeof ActivitySortBy[keyof typeof ActivitySortBy];


/**
 * 
 * @export
 * @interface ActivityTopic
 */
export interface ActivityTopic {
    /**
     * Title of the topic.
     * @type {string}
     * @memberof ActivityTopic
     */
    'title': string;
    /**
     * Summary of the activities in this topic.
     * @type {string}
     * @memberof ActivityTopic
     */
    'summary': string;
    /**
     * LLM generated sub-queries used to filter activities for this topic.
     * @type {Array<string>}
     * @memberof ActivityTopic
     */
    'queries': Array<string>;
    /**
     * List of activity IDs in this topic.
     * @type {Array<string>}
     * @memberof ActivityTopic
     */
    'activityIds': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateFeedRequest
 */
export interface CreateFeedRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFeedRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFeedRequest
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFeedRequest
     */
    'query': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateFeedRequest
     */
    'sourceUids': Array<string>;
}
/**
 * 
 * @export
 * @interface DeleteOwnFeed200Response
 */
export interface DeleteOwnFeed200Response {
    /**
     * Success message
     * @type {string}
     * @memberof DeleteOwnFeed200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Feed
 */
export interface Feed {
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    'query': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Feed
     */
    'sourceUids': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Feed
     */
    'isPublic': boolean;
    /**
     * ID of the user who created and owns the feed. Feed can only be modified by him.
     * @type {string}
     * @memberof Feed
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof Feed
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface FeedHighlight
 */
export interface FeedHighlight {
    /**
     * A concise highlight summarizing a key point
     * @type {string}
     * @memberof FeedHighlight
     */
    'content': string;
    /**
     * List of activity IDs that contributed to this highlight
     * @type {Array<string>}
     * @memberof FeedHighlight
     */
    'sourceActivityIds': Array<string>;
}
/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'uid': string;
    /**
     * 
     * @type {SourceType}
     * @memberof Source
     */
    'type': SourceType;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    'iconUrl': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SourceType = {
    MastodonAccount: 'mastodonAccount',
    MastodonTag: 'mastodonTag',
    HackernewsPosts: 'hackernewsPosts',
    RedditSubreddit: 'redditSubreddit',
    LobstersTag: 'lobstersTag',
    LobstersFeed: 'lobstersFeed',
    RssFeed: 'rssFeed',
    GithubReleases: 'githubReleases',
    GithubIssues: 'githubIssues',
    ChangedetectionWebsite: 'changedetectionWebsite'
} as const;

export type SourceType = typeof SourceType[keyof typeof SourceType];


/**
 * 
 * @export
 * @interface UpdateFeedRequest
 */
export interface UpdateFeedRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateFeedRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFeedRequest
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFeedRequest
     */
    'query': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateFeedRequest
     */
    'sourceUids': Array<string>;
}

/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a feed belonging to the authenticated user
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOwnFeed: async (createFeedRequest: CreateFeedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFeedRequest' is not null or undefined
            assertParamExists('createOwnFeed', 'createFeedRequest', createFeedRequest)
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwnFeed: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteOwnFeed', 'uid', uid)
            const localVarPath = `/feeds/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List activities for a feed
         * @param {string} uid 
         * @param {ActivityPeriod} [period] Time period to filter activities from. Defaults to \&#39;all\&#39; for all time.
         * @param {ActivitySortBy} [sortBy] Sort method.
         * @param {string} [query] Filter query. Authenticated users can override the default feed query.
         * @param {number} [limit] Maximum number of activities to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedActivities: async (uid: string, period?: ActivityPeriod, sortBy?: ActivitySortBy, query?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('listFeedActivities', 'uid', uid)
            const localVarPath = `/feeds/{uid}/activities`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List public feeds and/or those belonging to the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeeds: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {UpdateFeedRequest} updateFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnFeed: async (uid: string, updateFeedRequest: UpdateFeedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateOwnFeed', 'uid', uid)
            // verify required parameter 'updateFeedRequest' is not null or undefined
            assertParamExists('updateOwnFeed', 'updateFeedRequest', updateFeedRequest)
            const localVarPath = `/feeds/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a feed belonging to the authenticated user
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOwnFeed(createFeedRequest: CreateFeedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOwnFeed(createFeedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedsApi.createOwnFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOwnFeed(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteOwnFeed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOwnFeed(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedsApi.deleteOwnFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List activities for a feed
         * @param {string} uid 
         * @param {ActivityPeriod} [period] Time period to filter activities from. Defaults to \&#39;all\&#39; for all time.
         * @param {ActivitySortBy} [sortBy] Sort method.
         * @param {string} [query] Filter query. Authenticated users can override the default feed query.
         * @param {number} [limit] Maximum number of activities to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeedActivities(uid: string, period?: ActivityPeriod, sortBy?: ActivitySortBy, query?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeedActivities(uid, period, sortBy, query, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedsApi.listFeedActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List public feeds and/or those belonging to the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeeds(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feed>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeeds(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedsApi.listFeeds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {UpdateFeedRequest} updateFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOwnFeed(uid: string, updateFeedRequest: UpdateFeedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOwnFeed(uid, updateFeedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedsApi.updateOwnFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a feed belonging to the authenticated user
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOwnFeed(createFeedRequest: CreateFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feed> {
            return localVarFp.createOwnFeed(createFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwnFeed(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteOwnFeed200Response> {
            return localVarFp.deleteOwnFeed(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List activities for a feed
         * @param {string} uid 
         * @param {ActivityPeriod} [period] Time period to filter activities from. Defaults to \&#39;all\&#39; for all time.
         * @param {ActivitySortBy} [sortBy] Sort method.
         * @param {string} [query] Filter query. Authenticated users can override the default feed query.
         * @param {number} [limit] Maximum number of activities to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedActivities(uid: string, period?: ActivityPeriod, sortBy?: ActivitySortBy, query?: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ActivitiesListResponse> {
            return localVarFp.listFeedActivities(uid, period, sortBy, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List public feeds and/or those belonging to the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeeds(options?: RawAxiosRequestConfig): AxiosPromise<Array<Feed>> {
            return localVarFp.listFeeds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a feed belonging to the authenticated user
         * @param {string} uid 
         * @param {UpdateFeedRequest} updateFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnFeed(uid: string, updateFeedRequest: UpdateFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Feed> {
            return localVarFp.updateOwnFeed(uid, updateFeedRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export class FeedsApi extends BaseAPI {
    /**
     * 
     * @summary Create a feed belonging to the authenticated user
     * @param {CreateFeedRequest} createFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public createOwnFeed(createFeedRequest: CreateFeedRequest, options?: RawAxiosRequestConfig) {
        return FeedsApiFp(this.configuration).createOwnFeed(createFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a feed belonging to the authenticated user
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public deleteOwnFeed(uid: string, options?: RawAxiosRequestConfig) {
        return FeedsApiFp(this.configuration).deleteOwnFeed(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List activities for a feed
     * @param {string} uid 
     * @param {ActivityPeriod} [period] Time period to filter activities from. Defaults to \&#39;all\&#39; for all time.
     * @param {ActivitySortBy} [sortBy] Sort method.
     * @param {string} [query] Filter query. Authenticated users can override the default feed query.
     * @param {number} [limit] Maximum number of activities to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public listFeedActivities(uid: string, period?: ActivityPeriod, sortBy?: ActivitySortBy, query?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return FeedsApiFp(this.configuration).listFeedActivities(uid, period, sortBy, query, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List public feeds and/or those belonging to the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public listFeeds(options?: RawAxiosRequestConfig) {
        return FeedsApiFp(this.configuration).listFeeds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a feed belonging to the authenticated user
     * @param {string} uid 
     * @param {UpdateFeedRequest} updateFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public updateOwnFeed(uid: string, updateFeedRequest: UpdateFeedRequest, options?: RawAxiosRequestConfig) {
        return FeedsApiFp(this.configuration).updateOwnFeed(uid, updateFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource: async (uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getSource', 'uid', uid)
            const localVarPath = `/sources/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List available sources
         * @param {string} [query] Filter sources by name or description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (query?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSource(uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSource(uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.getSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List available sources
         * @param {string} [query] Filter sources by name or description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(query?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSources(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcesApi.listSources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get source by UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSource(uid: string, options?: RawAxiosRequestConfig): AxiosPromise<Source> {
            return localVarFp.getSource(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List available sources
         * @param {string} [query] Filter sources by name or description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(query?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Source>> {
            return localVarFp.listSources(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * 
     * @summary Get source by UID
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public getSource(uid: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).getSource(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List available sources
     * @param {string} [query] Filter sources by name or description.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public listSources(query?: string, options?: RawAxiosRequestConfig) {
        return SourcesApiFp(this.configuration).listSources(query, options).then((request) => request(this.axios, this.basePath));
    }
}



