// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/source"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	mutation *SourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *SourceCreate) SetName(s string) *SourceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *SourceCreate) SetURL(s string) *SourceCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetType sets the "type" field.
func (sc *SourceCreate) SetType(s string) *SourceCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetRawJSON sets the "raw_json" field.
func (sc *SourceCreate) SetRawJSON(s string) *SourceCreate {
	sc.mutation.SetRawJSON(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SourceCreate) SetID(s string) *SourceCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SourceMutation object of the builder.
func (sc *SourceCreate) Mutation() *SourceMutation {
	return sc.mutation
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SourceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SourceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SourceCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Source.name"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Source.url"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Source.type"`)}
	}
	if _, ok := sc.mutation.RawJSON(); !ok {
		return &ValidationError{Name: "raw_json", err: errors.New(`ent: missing required field "Source.raw_json"`)}
	}
	return nil
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Source.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SourceCreate) createSpec() (*Source, *sqlgraph.CreateSpec) {
	var (
		_node = &Source{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(source.Table, sqlgraph.NewFieldSpec(source.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(source.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(source.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(source.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.RawJSON(); ok {
		_spec.SetField(source.FieldRawJSON, field.TypeString, value)
		_node.RawJSON = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Source.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sc *SourceCreate) OnConflict(opts ...sql.ConflictOption) *SourceUpsertOne {
	sc.conflict = opts
	return &SourceUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Source.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SourceCreate) OnConflictColumns(columns ...string) *SourceUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SourceUpsertOne{
		create: sc,
	}
}

type (
	// SourceUpsertOne is the builder for "upsert"-ing
	//  one Source node.
	SourceUpsertOne struct {
		create *SourceCreate
	}

	// SourceUpsert is the "OnConflict" setter.
	SourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SourceUpsert) SetName(v string) *SourceUpsert {
	u.Set(source.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SourceUpsert) UpdateName() *SourceUpsert {
	u.SetExcluded(source.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *SourceUpsert) SetURL(v string) *SourceUpsert {
	u.Set(source.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SourceUpsert) UpdateURL() *SourceUpsert {
	u.SetExcluded(source.FieldURL)
	return u
}

// SetType sets the "type" field.
func (u *SourceUpsert) SetType(v string) *SourceUpsert {
	u.Set(source.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SourceUpsert) UpdateType() *SourceUpsert {
	u.SetExcluded(source.FieldType)
	return u
}

// SetRawJSON sets the "raw_json" field.
func (u *SourceUpsert) SetRawJSON(v string) *SourceUpsert {
	u.Set(source.FieldRawJSON, v)
	return u
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *SourceUpsert) UpdateRawJSON() *SourceUpsert {
	u.SetExcluded(source.FieldRawJSON)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Source.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(source.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SourceUpsertOne) UpdateNewValues() *SourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(source.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Source.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SourceUpsertOne) Ignore() *SourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceUpsertOne) DoNothing() *SourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceCreate.OnConflict
// documentation for more info.
func (u *SourceUpsertOne) Update(set func(*SourceUpsert)) *SourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SourceUpsertOne) SetName(v string) *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SourceUpsertOne) UpdateName() *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *SourceUpsertOne) SetURL(v string) *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SourceUpsertOne) UpdateURL() *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateURL()
	})
}

// SetType sets the "type" field.
func (u *SourceUpsertOne) SetType(v string) *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SourceUpsertOne) UpdateType() *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateType()
	})
}

// SetRawJSON sets the "raw_json" field.
func (u *SourceUpsertOne) SetRawJSON(v string) *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.SetRawJSON(v)
	})
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *SourceUpsertOne) UpdateRawJSON() *SourceUpsertOne {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateRawJSON()
	})
}

// Exec executes the query.
func (u *SourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SourceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SourceUpsertOne.ID is not supported by MySQL driver. Use SourceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SourceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SourceCreateBulk is the builder for creating many Source entities in bulk.
type SourceCreateBulk struct {
	config
	err      error
	builders []*SourceCreate
	conflict []sql.ConflictOption
}

// Save creates the Source entities in the database.
func (scb *SourceCreateBulk) Save(ctx context.Context) ([]*Source, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Source, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SourceCreateBulk) SaveX(ctx context.Context) []*Source {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SourceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SourceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Source.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (scb *SourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *SourceUpsertBulk {
	scb.conflict = opts
	return &SourceUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Source.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SourceCreateBulk) OnConflictColumns(columns ...string) *SourceUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SourceUpsertBulk{
		create: scb,
	}
}

// SourceUpsertBulk is the builder for "upsert"-ing
// a bulk of Source nodes.
type SourceUpsertBulk struct {
	create *SourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Source.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(source.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SourceUpsertBulk) UpdateNewValues() *SourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(source.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Source.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SourceUpsertBulk) Ignore() *SourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceUpsertBulk) DoNothing() *SourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceCreateBulk.OnConflict
// documentation for more info.
func (u *SourceUpsertBulk) Update(set func(*SourceUpsert)) *SourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SourceUpsertBulk) SetName(v string) *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SourceUpsertBulk) UpdateName() *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *SourceUpsertBulk) SetURL(v string) *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SourceUpsertBulk) UpdateURL() *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateURL()
	})
}

// SetType sets the "type" field.
func (u *SourceUpsertBulk) SetType(v string) *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SourceUpsertBulk) UpdateType() *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateType()
	})
}

// SetRawJSON sets the "raw_json" field.
func (u *SourceUpsertBulk) SetRawJSON(v string) *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.SetRawJSON(v)
	})
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *SourceUpsertBulk) UpdateRawJSON() *SourceUpsertBulk {
	return u.Update(func(s *SourceUpsert) {
		s.UpdateRawJSON()
	})
}

// Exec executes the query.
func (u *SourceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
