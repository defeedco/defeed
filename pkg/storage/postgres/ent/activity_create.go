// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/defeedco/defeed/pkg/storage/postgres/ent/activity"
	pgvector "github.com/pgvector/pgvector-go"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (ac *ActivityCreate) SetUID(s string) *ActivityCreate {
	ac.mutation.SetUID(s)
	return ac
}

// SetSourceUID sets the "source_uid" field.
func (ac *ActivityCreate) SetSourceUID(s string) *ActivityCreate {
	ac.mutation.SetSourceUID(s)
	return ac
}

// SetSourceType sets the "source_type" field.
func (ac *ActivityCreate) SetSourceType(s string) *ActivityCreate {
	ac.mutation.SetSourceType(s)
	return ac
}

// SetTitle sets the "title" field.
func (ac *ActivityCreate) SetTitle(s string) *ActivityCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetBody sets the "body" field.
func (ac *ActivityCreate) SetBody(s string) *ActivityCreate {
	ac.mutation.SetBody(s)
	return ac
}

// SetURL sets the "url" field.
func (ac *ActivityCreate) SetURL(s string) *ActivityCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetImageURL sets the "image_url" field.
func (ac *ActivityCreate) SetImageURL(s string) *ActivityCreate {
	ac.mutation.SetImageURL(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetShortSummary sets the "short_summary" field.
func (ac *ActivityCreate) SetShortSummary(s string) *ActivityCreate {
	ac.mutation.SetShortSummary(s)
	return ac
}

// SetFullSummary sets the "full_summary" field.
func (ac *ActivityCreate) SetFullSummary(s string) *ActivityCreate {
	ac.mutation.SetFullSummary(s)
	return ac
}

// SetRawJSON sets the "raw_json" field.
func (ac *ActivityCreate) SetRawJSON(s string) *ActivityCreate {
	ac.mutation.SetRawJSON(s)
	return ac
}

// SetEmbedding sets the "embedding" field.
func (ac *ActivityCreate) SetEmbedding(pg pgvector.Vector) *ActivityCreate {
	ac.mutation.SetEmbedding(pg)
	return ac
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableEmbedding(pg *pgvector.Vector) *ActivityCreate {
	if pg != nil {
		ac.SetEmbedding(*pg)
	}
	return ac
}

// SetUpdateCount sets the "update_count" field.
func (ac *ActivityCreate) SetUpdateCount(i int) *ActivityCreate {
	ac.mutation.SetUpdateCount(i)
	return ac
}

// SetNillableUpdateCount sets the "update_count" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdateCount(i *int) *ActivityCreate {
	if i != nil {
		ac.SetUpdateCount(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(s string) *ActivityCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.UpdateCount(); !ok {
		v := activity.DefaultUpdateCount
		ac.mutation.SetUpdateCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Activity.uid"`)}
	}
	if _, ok := ac.mutation.SourceUID(); !ok {
		return &ValidationError{Name: "source_uid", err: errors.New(`ent: missing required field "Activity.source_uid"`)}
	}
	if _, ok := ac.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Activity.source_type"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Activity.title"`)}
	}
	if _, ok := ac.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Activity.body"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Activity.url"`)}
	}
	if _, ok := ac.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Activity.image_url"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Activity.created_at"`)}
	}
	if _, ok := ac.mutation.ShortSummary(); !ok {
		return &ValidationError{Name: "short_summary", err: errors.New(`ent: missing required field "Activity.short_summary"`)}
	}
	if _, ok := ac.mutation.FullSummary(); !ok {
		return &ValidationError{Name: "full_summary", err: errors.New(`ent: missing required field "Activity.full_summary"`)}
	}
	if _, ok := ac.mutation.RawJSON(); !ok {
		return &ValidationError{Name: "raw_json", err: errors.New(`ent: missing required field "Activity.raw_json"`)}
	}
	if _, ok := ac.mutation.UpdateCount(); !ok {
		return &ValidationError{Name: "update_count", err: errors.New(`ent: missing required field "Activity.update_count"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Activity.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UID(); ok {
		_spec.SetField(activity.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := ac.mutation.SourceUID(); ok {
		_spec.SetField(activity.FieldSourceUID, field.TypeString, value)
		_node.SourceUID = value
	}
	if value, ok := ac.mutation.SourceType(); ok {
		_spec.SetField(activity.FieldSourceType, field.TypeString, value)
		_node.SourceType = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ac.mutation.Body(); ok {
		_spec.SetField(activity.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(activity.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.ImageURL(); ok {
		_spec.SetField(activity.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.ShortSummary(); ok {
		_spec.SetField(activity.FieldShortSummary, field.TypeString, value)
		_node.ShortSummary = value
	}
	if value, ok := ac.mutation.FullSummary(); ok {
		_spec.SetField(activity.FieldFullSummary, field.TypeString, value)
		_node.FullSummary = value
	}
	if value, ok := ac.mutation.RawJSON(); ok {
		_spec.SetField(activity.FieldRawJSON, field.TypeString, value)
		_node.RawJSON = value
	}
	if value, ok := ac.mutation.Embedding(); ok {
		_spec.SetField(activity.FieldEmbedding, field.TypeOther, value)
		_node.Embedding = &value
	}
	if value, ok := ac.mutation.UpdateCount(); ok {
		_spec.SetField(activity.FieldUpdateCount, field.TypeInt, value)
		_node.UpdateCount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertOne {
	ac.conflict = opts
	return &ActivityUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflictColumns(columns ...string) *ActivityUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertOne{
		create: ac,
	}
}

type (
	// ActivityUpsertOne is the builder for "upsert"-ing
	//  one Activity node.
	ActivityUpsertOne struct {
		create *ActivityCreate
	}

	// ActivityUpsert is the "OnConflict" setter.
	ActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *ActivityUpsert) SetUID(v string) *ActivityUpsert {
	u.Set(activity.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateUID() *ActivityUpsert {
	u.SetExcluded(activity.FieldUID)
	return u
}

// SetSourceUID sets the "source_uid" field.
func (u *ActivityUpsert) SetSourceUID(v string) *ActivityUpsert {
	u.Set(activity.FieldSourceUID, v)
	return u
}

// UpdateSourceUID sets the "source_uid" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSourceUID() *ActivityUpsert {
	u.SetExcluded(activity.FieldSourceUID)
	return u
}

// SetSourceType sets the "source_type" field.
func (u *ActivityUpsert) SetSourceType(v string) *ActivityUpsert {
	u.Set(activity.FieldSourceType, v)
	return u
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSourceType() *ActivityUpsert {
	u.SetExcluded(activity.FieldSourceType)
	return u
}

// SetTitle sets the "title" field.
func (u *ActivityUpsert) SetTitle(v string) *ActivityUpsert {
	u.Set(activity.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateTitle() *ActivityUpsert {
	u.SetExcluded(activity.FieldTitle)
	return u
}

// SetBody sets the "body" field.
func (u *ActivityUpsert) SetBody(v string) *ActivityUpsert {
	u.Set(activity.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateBody() *ActivityUpsert {
	u.SetExcluded(activity.FieldBody)
	return u
}

// SetURL sets the "url" field.
func (u *ActivityUpsert) SetURL(v string) *ActivityUpsert {
	u.Set(activity.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateURL() *ActivityUpsert {
	u.SetExcluded(activity.FieldURL)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *ActivityUpsert) SetImageURL(v string) *ActivityUpsert {
	u.Set(activity.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateImageURL() *ActivityUpsert {
	u.SetExcluded(activity.FieldImageURL)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityUpsert) SetCreatedAt(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateCreatedAt() *ActivityUpsert {
	u.SetExcluded(activity.FieldCreatedAt)
	return u
}

// SetShortSummary sets the "short_summary" field.
func (u *ActivityUpsert) SetShortSummary(v string) *ActivityUpsert {
	u.Set(activity.FieldShortSummary, v)
	return u
}

// UpdateShortSummary sets the "short_summary" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateShortSummary() *ActivityUpsert {
	u.SetExcluded(activity.FieldShortSummary)
	return u
}

// SetFullSummary sets the "full_summary" field.
func (u *ActivityUpsert) SetFullSummary(v string) *ActivityUpsert {
	u.Set(activity.FieldFullSummary, v)
	return u
}

// UpdateFullSummary sets the "full_summary" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateFullSummary() *ActivityUpsert {
	u.SetExcluded(activity.FieldFullSummary)
	return u
}

// SetRawJSON sets the "raw_json" field.
func (u *ActivityUpsert) SetRawJSON(v string) *ActivityUpsert {
	u.Set(activity.FieldRawJSON, v)
	return u
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateRawJSON() *ActivityUpsert {
	u.SetExcluded(activity.FieldRawJSON)
	return u
}

// SetEmbedding sets the "embedding" field.
func (u *ActivityUpsert) SetEmbedding(v pgvector.Vector) *ActivityUpsert {
	u.Set(activity.FieldEmbedding, v)
	return u
}

// UpdateEmbedding sets the "embedding" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateEmbedding() *ActivityUpsert {
	u.SetExcluded(activity.FieldEmbedding)
	return u
}

// ClearEmbedding clears the value of the "embedding" field.
func (u *ActivityUpsert) ClearEmbedding() *ActivityUpsert {
	u.SetNull(activity.FieldEmbedding)
	return u
}

// SetUpdateCount sets the "update_count" field.
func (u *ActivityUpsert) SetUpdateCount(v int) *ActivityUpsert {
	u.Set(activity.FieldUpdateCount, v)
	return u
}

// UpdateUpdateCount sets the "update_count" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateUpdateCount() *ActivityUpsert {
	u.SetExcluded(activity.FieldUpdateCount)
	return u
}

// AddUpdateCount adds v to the "update_count" field.
func (u *ActivityUpsert) AddUpdateCount(v int) *ActivityUpsert {
	u.Add(activity.FieldUpdateCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertOne) UpdateNewValues() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(activity.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityUpsertOne) Ignore() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertOne) DoNothing() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreate.OnConflict
// documentation for more info.
func (u *ActivityUpsertOne) Update(set func(*ActivityUpsert)) *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *ActivityUpsertOne) SetUID(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateUID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUID()
	})
}

// SetSourceUID sets the "source_uid" field.
func (u *ActivityUpsertOne) SetSourceUID(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSourceUID(v)
	})
}

// UpdateSourceUID sets the "source_uid" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSourceUID() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSourceUID()
	})
}

// SetSourceType sets the "source_type" field.
func (u *ActivityUpsertOne) SetSourceType(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSourceType() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSourceType()
	})
}

// SetTitle sets the "title" field.
func (u *ActivityUpsertOne) SetTitle(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateTitle() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *ActivityUpsertOne) SetBody(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateBody() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateBody()
	})
}

// SetURL sets the "url" field.
func (u *ActivityUpsertOne) SetURL(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateURL() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateURL()
	})
}

// SetImageURL sets the "image_url" field.
func (u *ActivityUpsertOne) SetImageURL(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateImageURL() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateImageURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityUpsertOne) SetCreatedAt(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateCreatedAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetShortSummary sets the "short_summary" field.
func (u *ActivityUpsertOne) SetShortSummary(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetShortSummary(v)
	})
}

// UpdateShortSummary sets the "short_summary" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateShortSummary() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateShortSummary()
	})
}

// SetFullSummary sets the "full_summary" field.
func (u *ActivityUpsertOne) SetFullSummary(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetFullSummary(v)
	})
}

// UpdateFullSummary sets the "full_summary" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateFullSummary() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateFullSummary()
	})
}

// SetRawJSON sets the "raw_json" field.
func (u *ActivityUpsertOne) SetRawJSON(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetRawJSON(v)
	})
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateRawJSON() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateRawJSON()
	})
}

// SetEmbedding sets the "embedding" field.
func (u *ActivityUpsertOne) SetEmbedding(v pgvector.Vector) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetEmbedding(v)
	})
}

// UpdateEmbedding sets the "embedding" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateEmbedding() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateEmbedding()
	})
}

// ClearEmbedding clears the value of the "embedding" field.
func (u *ActivityUpsertOne) ClearEmbedding() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearEmbedding()
	})
}

// SetUpdateCount sets the "update_count" field.
func (u *ActivityUpsertOne) SetUpdateCount(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUpdateCount(v)
	})
}

// AddUpdateCount adds v to the "update_count" field.
func (u *ActivityUpsertOne) AddUpdateCount(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddUpdateCount(v)
	})
}

// UpdateUpdateCount sets the "update_count" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateUpdateCount() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUpdateCount()
	})
}

// Exec executes the query.
func (u *ActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ActivityUpsertOne.ID is not supported by MySQL driver. Use ActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertBulk {
	acb.conflict = opts
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflictColumns(columns ...string) *ActivityUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// ActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of Activity nodes.
type ActivityUpsertBulk struct {
	create *ActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertBulk) UpdateNewValues() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(activity.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityUpsertBulk) Ignore() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertBulk) DoNothing() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityUpsertBulk) Update(set func(*ActivityUpsert)) *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *ActivityUpsertBulk) SetUID(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateUID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUID()
	})
}

// SetSourceUID sets the "source_uid" field.
func (u *ActivityUpsertBulk) SetSourceUID(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSourceUID(v)
	})
}

// UpdateSourceUID sets the "source_uid" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSourceUID() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSourceUID()
	})
}

// SetSourceType sets the "source_type" field.
func (u *ActivityUpsertBulk) SetSourceType(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSourceType(v)
	})
}

// UpdateSourceType sets the "source_type" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSourceType() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSourceType()
	})
}

// SetTitle sets the "title" field.
func (u *ActivityUpsertBulk) SetTitle(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateTitle() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *ActivityUpsertBulk) SetBody(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateBody() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateBody()
	})
}

// SetURL sets the "url" field.
func (u *ActivityUpsertBulk) SetURL(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateURL() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateURL()
	})
}

// SetImageURL sets the "image_url" field.
func (u *ActivityUpsertBulk) SetImageURL(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateImageURL() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateImageURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityUpsertBulk) SetCreatedAt(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateCreatedAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetShortSummary sets the "short_summary" field.
func (u *ActivityUpsertBulk) SetShortSummary(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetShortSummary(v)
	})
}

// UpdateShortSummary sets the "short_summary" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateShortSummary() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateShortSummary()
	})
}

// SetFullSummary sets the "full_summary" field.
func (u *ActivityUpsertBulk) SetFullSummary(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetFullSummary(v)
	})
}

// UpdateFullSummary sets the "full_summary" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateFullSummary() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateFullSummary()
	})
}

// SetRawJSON sets the "raw_json" field.
func (u *ActivityUpsertBulk) SetRawJSON(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetRawJSON(v)
	})
}

// UpdateRawJSON sets the "raw_json" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateRawJSON() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateRawJSON()
	})
}

// SetEmbedding sets the "embedding" field.
func (u *ActivityUpsertBulk) SetEmbedding(v pgvector.Vector) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetEmbedding(v)
	})
}

// UpdateEmbedding sets the "embedding" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateEmbedding() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateEmbedding()
	})
}

// ClearEmbedding clears the value of the "embedding" field.
func (u *ActivityUpsertBulk) ClearEmbedding() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearEmbedding()
	})
}

// SetUpdateCount sets the "update_count" field.
func (u *ActivityUpsertBulk) SetUpdateCount(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUpdateCount(v)
	})
}

// AddUpdateCount adds v to the "update_count" field.
func (u *ActivityUpsertBulk) AddUpdateCount(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddUpdateCount(v)
	})
}

// UpdateUpdateCount sets the "update_count" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateUpdateCount() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUpdateCount()
	})
}

// Exec executes the query.
func (u *ActivityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
