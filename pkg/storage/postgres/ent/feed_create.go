// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glanceapp/glance/pkg/feeds"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/feed"
)

// FeedCreate is the builder for creating a Feed entity.
type FeedCreate struct {
	config
	mutation *FeedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (fc *FeedCreate) SetUserID(s string) *FeedCreate {
	fc.mutation.SetUserID(s)
	return fc
}

// SetName sets the "name" field.
func (fc *FeedCreate) SetName(s string) *FeedCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetIcon sets the "icon" field.
func (fc *FeedCreate) SetIcon(s string) *FeedCreate {
	fc.mutation.SetIcon(s)
	return fc
}

// SetQuery sets the "query" field.
func (fc *FeedCreate) SetQuery(s string) *FeedCreate {
	fc.mutation.SetQuery(s)
	return fc
}

// SetSourceUids sets the "source_uids" field.
func (fc *FeedCreate) SetSourceUids(s []string) *FeedCreate {
	fc.mutation.SetSourceUids(s)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedCreate) SetCreatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedCreate) SetUpdatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetSummaries sets the "summaries" field.
func (fc *FeedCreate) SetSummaries(fs []feeds.FeedSummary) *FeedCreate {
	fc.mutation.SetSummaries(fs)
	return fc
}

// SetID sets the "id" field.
func (fc *FeedCreate) SetID(s string) *FeedCreate {
	fc.mutation.SetID(s)
	return fc
}

// Mutation returns the FeedMutation object of the builder.
func (fc *FeedCreate) Mutation() *FeedMutation {
	return fc.mutation
}

// Save creates the Feed in the database.
func (fc *FeedCreate) Save(ctx context.Context) (*Feed, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedCreate) SaveX(ctx context.Context) *Feed {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedCreate) check() error {
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Feed.user_id"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Feed.name"`)}
	}
	if _, ok := fc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "Feed.icon"`)}
	}
	if _, ok := fc.mutation.Query(); !ok {
		return &ValidationError{Name: "query", err: errors.New(`ent: missing required field "Feed.query"`)}
	}
	if _, ok := fc.mutation.SourceUids(); !ok {
		return &ValidationError{Name: "source_uids", err: errors.New(`ent: missing required field "Feed.source_uids"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Feed.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Feed.updated_at"`)}
	}
	return nil
}

func (fc *FeedCreate) sqlSave(ctx context.Context) (*Feed, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Feed.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeedCreate) createSpec() (*Feed, *sqlgraph.CreateSpec) {
	var (
		_node = &Feed{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(feed.Table, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.UserID(); ok {
		_spec.SetField(feed.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(feed.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Icon(); ok {
		_spec.SetField(feed.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := fc.mutation.Query(); ok {
		_spec.SetField(feed.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := fc.mutation.SourceUids(); ok {
		_spec.SetField(feed.FieldSourceUids, field.TypeJSON, value)
		_node.SourceUids = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.Summaries(); ok {
		_spec.SetField(feed.FieldSummaries, field.TypeJSON, value)
		_node.Summaries = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feed.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (fc *FeedCreate) OnConflict(opts ...sql.ConflictOption) *FeedUpsertOne {
	fc.conflict = opts
	return &FeedUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FeedCreate) OnConflictColumns(columns ...string) *FeedUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeedUpsertOne{
		create: fc,
	}
}

type (
	// FeedUpsertOne is the builder for "upsert"-ing
	//  one Feed node.
	FeedUpsertOne struct {
		create *FeedCreate
	}

	// FeedUpsert is the "OnConflict" setter.
	FeedUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *FeedUpsert) SetUserID(v string) *FeedUpsert {
	u.Set(feed.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FeedUpsert) UpdateUserID() *FeedUpsert {
	u.SetExcluded(feed.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *FeedUpsert) SetName(v string) *FeedUpsert {
	u.Set(feed.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedUpsert) UpdateName() *FeedUpsert {
	u.SetExcluded(feed.FieldName)
	return u
}

// SetIcon sets the "icon" field.
func (u *FeedUpsert) SetIcon(v string) *FeedUpsert {
	u.Set(feed.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *FeedUpsert) UpdateIcon() *FeedUpsert {
	u.SetExcluded(feed.FieldIcon)
	return u
}

// SetQuery sets the "query" field.
func (u *FeedUpsert) SetQuery(v string) *FeedUpsert {
	u.Set(feed.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *FeedUpsert) UpdateQuery() *FeedUpsert {
	u.SetExcluded(feed.FieldQuery)
	return u
}

// SetSourceUids sets the "source_uids" field.
func (u *FeedUpsert) SetSourceUids(v []string) *FeedUpsert {
	u.Set(feed.FieldSourceUids, v)
	return u
}

// UpdateSourceUids sets the "source_uids" field to the value that was provided on create.
func (u *FeedUpsert) UpdateSourceUids() *FeedUpsert {
	u.SetExcluded(feed.FieldSourceUids)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsert) SetCreatedAt(v time.Time) *FeedUpsert {
	u.Set(feed.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsert) UpdateCreatedAt() *FeedUpsert {
	u.SetExcluded(feed.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsert) SetUpdatedAt(v time.Time) *FeedUpsert {
	u.Set(feed.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsert) UpdateUpdatedAt() *FeedUpsert {
	u.SetExcluded(feed.FieldUpdatedAt)
	return u
}

// SetSummaries sets the "summaries" field.
func (u *FeedUpsert) SetSummaries(v []feeds.FeedSummary) *FeedUpsert {
	u.Set(feed.FieldSummaries, v)
	return u
}

// UpdateSummaries sets the "summaries" field to the value that was provided on create.
func (u *FeedUpsert) UpdateSummaries() *FeedUpsert {
	u.SetExcluded(feed.FieldSummaries)
	return u
}

// ClearSummaries clears the value of the "summaries" field.
func (u *FeedUpsert) ClearSummaries() *FeedUpsert {
	u.SetNull(feed.FieldSummaries)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedUpsertOne) UpdateNewValues() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feed.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedUpsertOne) Ignore() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedUpsertOne) DoNothing() *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedCreate.OnConflict
// documentation for more info.
func (u *FeedUpsertOne) Update(set func(*FeedUpsert)) *FeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *FeedUpsertOne) SetUserID(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateUserID() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *FeedUpsertOne) SetName(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateName() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *FeedUpsertOne) SetIcon(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateIcon() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateIcon()
	})
}

// SetQuery sets the "query" field.
func (u *FeedUpsertOne) SetQuery(v string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateQuery() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateQuery()
	})
}

// SetSourceUids sets the "source_uids" field.
func (u *FeedUpsertOne) SetSourceUids(v []string) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetSourceUids(v)
	})
}

// UpdateSourceUids sets the "source_uids" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateSourceUids() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateSourceUids()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsertOne) SetCreatedAt(v time.Time) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateCreatedAt() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsertOne) SetUpdatedAt(v time.Time) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateUpdatedAt() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSummaries sets the "summaries" field.
func (u *FeedUpsertOne) SetSummaries(v []feeds.FeedSummary) *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.SetSummaries(v)
	})
}

// UpdateSummaries sets the "summaries" field to the value that was provided on create.
func (u *FeedUpsertOne) UpdateSummaries() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateSummaries()
	})
}

// ClearSummaries clears the value of the "summaries" field.
func (u *FeedUpsertOne) ClearSummaries() *FeedUpsertOne {
	return u.Update(func(s *FeedUpsert) {
		s.ClearSummaries()
	})
}

// Exec executes the query.
func (u *FeedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FeedUpsertOne.ID is not supported by MySQL driver. Use FeedUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedCreateBulk is the builder for creating many Feed entities in bulk.
type FeedCreateBulk struct {
	config
	err      error
	builders []*FeedCreate
	conflict []sql.ConflictOption
}

// Save creates the Feed entities in the database.
func (fcb *FeedCreateBulk) Save(ctx context.Context) ([]*Feed, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feed, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedCreateBulk) SaveX(ctx context.Context) []*Feed {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feed.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (fcb *FeedCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedUpsertBulk {
	fcb.conflict = opts
	return &FeedUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FeedCreateBulk) OnConflictColumns(columns ...string) *FeedUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeedUpsertBulk{
		create: fcb,
	}
}

// FeedUpsertBulk is the builder for "upsert"-ing
// a bulk of Feed nodes.
type FeedUpsertBulk struct {
	create *FeedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeedUpsertBulk) UpdateNewValues() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feed.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feed.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedUpsertBulk) Ignore() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedUpsertBulk) DoNothing() *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedCreateBulk.OnConflict
// documentation for more info.
func (u *FeedUpsertBulk) Update(set func(*FeedUpsert)) *FeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *FeedUpsertBulk) SetUserID(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateUserID() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUserID()
	})
}

// SetName sets the "name" field.
func (u *FeedUpsertBulk) SetName(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateName() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *FeedUpsertBulk) SetIcon(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateIcon() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateIcon()
	})
}

// SetQuery sets the "query" field.
func (u *FeedUpsertBulk) SetQuery(v string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateQuery() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateQuery()
	})
}

// SetSourceUids sets the "source_uids" field.
func (u *FeedUpsertBulk) SetSourceUids(v []string) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetSourceUids(v)
	})
}

// UpdateSourceUids sets the "source_uids" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateSourceUids() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateSourceUids()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedUpsertBulk) SetCreatedAt(v time.Time) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateCreatedAt() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedUpsertBulk) SetUpdatedAt(v time.Time) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateUpdatedAt() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSummaries sets the "summaries" field.
func (u *FeedUpsertBulk) SetSummaries(v []feeds.FeedSummary) *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.SetSummaries(v)
	})
}

// UpdateSummaries sets the "summaries" field to the value that was provided on create.
func (u *FeedUpsertBulk) UpdateSummaries() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.UpdateSummaries()
	})
}

// ClearSummaries clears the value of the "summaries" field.
func (u *FeedUpsertBulk) ClearSummaries() *FeedUpsertBulk {
	return u.Update(func(s *FeedUpsert) {
		s.ClearSummaries()
	})
}

// Exec executes the query.
func (u *FeedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
