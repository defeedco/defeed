// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/defeedco/defeed/pkg/storage/postgres/ent/feed"
	"github.com/defeedco/defeed/pkg/storage/postgres/ent/predicate"
)

// FeedUpdate is the builder for updating Feed entities.
type FeedUpdate struct {
	config
	hooks    []Hook
	mutation *FeedMutation
}

// Where appends a list predicates to the FeedUpdate builder.
func (fu *FeedUpdate) Where(ps ...predicate.Feed) *FeedUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FeedUpdate) SetUserID(s string) *FeedUpdate {
	fu.mutation.SetUserID(s)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableUserID(s *string) *FeedUpdate {
	if s != nil {
		fu.SetUserID(*s)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FeedUpdate) SetName(s string) *FeedUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableName(s *string) *FeedUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetIcon sets the "icon" field.
func (fu *FeedUpdate) SetIcon(s string) *FeedUpdate {
	fu.mutation.SetIcon(s)
	return fu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableIcon(s *string) *FeedUpdate {
	if s != nil {
		fu.SetIcon(*s)
	}
	return fu
}

// SetQuery sets the "query" field.
func (fu *FeedUpdate) SetQuery(s string) *FeedUpdate {
	fu.mutation.SetQuery(s)
	return fu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableQuery(s *string) *FeedUpdate {
	if s != nil {
		fu.SetQuery(*s)
	}
	return fu
}

// SetPublic sets the "public" field.
func (fu *FeedUpdate) SetPublic(b bool) *FeedUpdate {
	fu.mutation.SetPublic(b)
	return fu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (fu *FeedUpdate) SetNillablePublic(b *bool) *FeedUpdate {
	if b != nil {
		fu.SetPublic(*b)
	}
	return fu
}

// SetSourceUids sets the "source_uids" field.
func (fu *FeedUpdate) SetSourceUids(s []string) *FeedUpdate {
	fu.mutation.SetSourceUids(s)
	return fu
}

// AppendSourceUids appends s to the "source_uids" field.
func (fu *FeedUpdate) AppendSourceUids(s []string) *FeedUpdate {
	fu.mutation.AppendSourceUids(s)
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FeedUpdate) SetCreatedAt(t time.Time) *FeedUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableCreatedAt(t *time.Time) *FeedUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeedUpdate) SetUpdatedAt(t time.Time) *FeedUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableUpdatedAt(t *time.Time) *FeedUpdate {
	if t != nil {
		fu.SetUpdatedAt(*t)
	}
	return fu
}

// Mutation returns the FeedMutation object of the builder.
func (fu *FeedUpdate) Mutation() *FeedMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feed.Table, feed.Columns, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.SetField(feed.FieldUserID, field.TypeString, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(feed.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Icon(); ok {
		_spec.SetField(feed.FieldIcon, field.TypeString, value)
	}
	if value, ok := fu.mutation.Query(); ok {
		_spec.SetField(feed.FieldQuery, field.TypeString, value)
	}
	if value, ok := fu.mutation.Public(); ok {
		_spec.SetField(feed.FieldPublic, field.TypeBool, value)
	}
	if value, ok := fu.mutation.SourceUids(); ok {
		_spec.SetField(feed.FieldSourceUids, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedSourceUids(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feed.FieldSourceUids, value)
		})
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedUpdateOne is the builder for updating a single Feed entity.
type FeedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedMutation
}

// SetUserID sets the "user_id" field.
func (fuo *FeedUpdateOne) SetUserID(s string) *FeedUpdateOne {
	fuo.mutation.SetUserID(s)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableUserID(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetUserID(*s)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FeedUpdateOne) SetName(s string) *FeedUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableName(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetIcon sets the "icon" field.
func (fuo *FeedUpdateOne) SetIcon(s string) *FeedUpdateOne {
	fuo.mutation.SetIcon(s)
	return fuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableIcon(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetIcon(*s)
	}
	return fuo
}

// SetQuery sets the "query" field.
func (fuo *FeedUpdateOne) SetQuery(s string) *FeedUpdateOne {
	fuo.mutation.SetQuery(s)
	return fuo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableQuery(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetQuery(*s)
	}
	return fuo
}

// SetPublic sets the "public" field.
func (fuo *FeedUpdateOne) SetPublic(b bool) *FeedUpdateOne {
	fuo.mutation.SetPublic(b)
	return fuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillablePublic(b *bool) *FeedUpdateOne {
	if b != nil {
		fuo.SetPublic(*b)
	}
	return fuo
}

// SetSourceUids sets the "source_uids" field.
func (fuo *FeedUpdateOne) SetSourceUids(s []string) *FeedUpdateOne {
	fuo.mutation.SetSourceUids(s)
	return fuo
}

// AppendSourceUids appends s to the "source_uids" field.
func (fuo *FeedUpdateOne) AppendSourceUids(s []string) *FeedUpdateOne {
	fuo.mutation.AppendSourceUids(s)
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FeedUpdateOne) SetCreatedAt(t time.Time) *FeedUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeedUpdateOne) SetUpdatedAt(t time.Time) *FeedUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableUpdatedAt(t *time.Time) *FeedUpdateOne {
	if t != nil {
		fuo.SetUpdatedAt(*t)
	}
	return fuo
}

// Mutation returns the FeedMutation object of the builder.
func (fuo *FeedUpdateOne) Mutation() *FeedMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeedUpdate builder.
func (fuo *FeedUpdateOne) Where(ps ...predicate.Feed) *FeedUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedUpdateOne) Select(field string, fields ...string) *FeedUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feed entity.
func (fuo *FeedUpdateOne) Save(ctx context.Context) (*Feed, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedUpdateOne) SaveX(ctx context.Context) *Feed {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FeedUpdateOne) sqlSave(ctx context.Context) (_node *Feed, err error) {
	_spec := sqlgraph.NewUpdateSpec(feed.Table, feed.Columns, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feed.FieldID)
		for _, f := range fields {
			if !feed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.SetField(feed.FieldUserID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(feed.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Icon(); ok {
		_spec.SetField(feed.FieldIcon, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Query(); ok {
		_spec.SetField(feed.FieldQuery, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Public(); ok {
		_spec.SetField(feed.FieldPublic, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.SourceUids(); ok {
		_spec.SetField(feed.FieldSourceUids, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedSourceUids(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feed.FieldSourceUids, value)
		})
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Feed{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
