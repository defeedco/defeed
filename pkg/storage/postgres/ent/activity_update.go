// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/activity"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/predicate"
	pgvector "github.com/pgvector/pgvector-go"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUID sets the "uid" field.
func (au *ActivityUpdate) SetUID(s string) *ActivityUpdate {
	au.mutation.SetUID(s)
	return au
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUID(s *string) *ActivityUpdate {
	if s != nil {
		au.SetUID(*s)
	}
	return au
}

// SetSourceUID sets the "source_uid" field.
func (au *ActivityUpdate) SetSourceUID(s string) *ActivityUpdate {
	au.mutation.SetSourceUID(s)
	return au
}

// SetNillableSourceUID sets the "source_uid" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSourceUID(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSourceUID(*s)
	}
	return au
}

// SetSourceType sets the "source_type" field.
func (au *ActivityUpdate) SetSourceType(s string) *ActivityUpdate {
	au.mutation.SetSourceType(s)
	return au
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSourceType(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSourceType(*s)
	}
	return au
}

// SetTitle sets the "title" field.
func (au *ActivityUpdate) SetTitle(s string) *ActivityUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableTitle(s *string) *ActivityUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetBody sets the "body" field.
func (au *ActivityUpdate) SetBody(s string) *ActivityUpdate {
	au.mutation.SetBody(s)
	return au
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableBody(s *string) *ActivityUpdate {
	if s != nil {
		au.SetBody(*s)
	}
	return au
}

// SetURL sets the "url" field.
func (au *ActivityUpdate) SetURL(s string) *ActivityUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableURL(s *string) *ActivityUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// SetImageURL sets the "image_url" field.
func (au *ActivityUpdate) SetImageURL(s string) *ActivityUpdate {
	au.mutation.SetImageURL(s)
	return au
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableImageURL(s *string) *ActivityUpdate {
	if s != nil {
		au.SetImageURL(*s)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ActivityUpdate) SetCreatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreatedAt(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetShortSummary sets the "short_summary" field.
func (au *ActivityUpdate) SetShortSummary(s string) *ActivityUpdate {
	au.mutation.SetShortSummary(s)
	return au
}

// SetNillableShortSummary sets the "short_summary" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableShortSummary(s *string) *ActivityUpdate {
	if s != nil {
		au.SetShortSummary(*s)
	}
	return au
}

// SetFullSummary sets the "full_summary" field.
func (au *ActivityUpdate) SetFullSummary(s string) *ActivityUpdate {
	au.mutation.SetFullSummary(s)
	return au
}

// SetNillableFullSummary sets the "full_summary" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableFullSummary(s *string) *ActivityUpdate {
	if s != nil {
		au.SetFullSummary(*s)
	}
	return au
}

// SetRawJSON sets the "raw_json" field.
func (au *ActivityUpdate) SetRawJSON(s string) *ActivityUpdate {
	au.mutation.SetRawJSON(s)
	return au
}

// SetNillableRawJSON sets the "raw_json" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableRawJSON(s *string) *ActivityUpdate {
	if s != nil {
		au.SetRawJSON(*s)
	}
	return au
}

// SetEmbedding sets the "embedding" field.
func (au *ActivityUpdate) SetEmbedding(pg pgvector.Vector) *ActivityUpdate {
	au.mutation.SetEmbedding(pg)
	return au
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableEmbedding(pg *pgvector.Vector) *ActivityUpdate {
	if pg != nil {
		au.SetEmbedding(*pg)
	}
	return au
}

// ClearEmbedding clears the value of the "embedding" field.
func (au *ActivityUpdate) ClearEmbedding() *ActivityUpdate {
	au.mutation.ClearEmbedding()
	return au
}

// SetUpdateCount sets the "update_count" field.
func (au *ActivityUpdate) SetUpdateCount(i int) *ActivityUpdate {
	au.mutation.ResetUpdateCount()
	au.mutation.SetUpdateCount(i)
	return au
}

// SetNillableUpdateCount sets the "update_count" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUpdateCount(i *int) *ActivityUpdate {
	if i != nil {
		au.SetUpdateCount(*i)
	}
	return au
}

// AddUpdateCount adds i to the "update_count" field.
func (au *ActivityUpdate) AddUpdateCount(i int) *ActivityUpdate {
	au.mutation.AddUpdateCount(i)
	return au
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UID(); ok {
		_spec.SetField(activity.FieldUID, field.TypeString, value)
	}
	if value, ok := au.mutation.SourceUID(); ok {
		_spec.SetField(activity.FieldSourceUID, field.TypeString, value)
	}
	if value, ok := au.mutation.SourceType(); ok {
		_spec.SetField(activity.FieldSourceType, field.TypeString, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Body(); ok {
		_spec.SetField(activity.FieldBody, field.TypeString, value)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(activity.FieldURL, field.TypeString, value)
	}
	if value, ok := au.mutation.ImageURL(); ok {
		_spec.SetField(activity.FieldImageURL, field.TypeString, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.ShortSummary(); ok {
		_spec.SetField(activity.FieldShortSummary, field.TypeString, value)
	}
	if value, ok := au.mutation.FullSummary(); ok {
		_spec.SetField(activity.FieldFullSummary, field.TypeString, value)
	}
	if value, ok := au.mutation.RawJSON(); ok {
		_spec.SetField(activity.FieldRawJSON, field.TypeString, value)
	}
	if value, ok := au.mutation.Embedding(); ok {
		_spec.SetField(activity.FieldEmbedding, field.TypeOther, value)
	}
	if au.mutation.EmbeddingCleared() {
		_spec.ClearField(activity.FieldEmbedding, field.TypeOther)
	}
	if value, ok := au.mutation.UpdateCount(); ok {
		_spec.SetField(activity.FieldUpdateCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedUpdateCount(); ok {
		_spec.AddField(activity.FieldUpdateCount, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetUID sets the "uid" field.
func (auo *ActivityUpdateOne) SetUID(s string) *ActivityUpdateOne {
	auo.mutation.SetUID(s)
	return auo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUID(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetUID(*s)
	}
	return auo
}

// SetSourceUID sets the "source_uid" field.
func (auo *ActivityUpdateOne) SetSourceUID(s string) *ActivityUpdateOne {
	auo.mutation.SetSourceUID(s)
	return auo
}

// SetNillableSourceUID sets the "source_uid" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSourceUID(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSourceUID(*s)
	}
	return auo
}

// SetSourceType sets the "source_type" field.
func (auo *ActivityUpdateOne) SetSourceType(s string) *ActivityUpdateOne {
	auo.mutation.SetSourceType(s)
	return auo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSourceType(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSourceType(*s)
	}
	return auo
}

// SetTitle sets the "title" field.
func (auo *ActivityUpdateOne) SetTitle(s string) *ActivityUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableTitle(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetBody sets the "body" field.
func (auo *ActivityUpdateOne) SetBody(s string) *ActivityUpdateOne {
	auo.mutation.SetBody(s)
	return auo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableBody(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetBody(*s)
	}
	return auo
}

// SetURL sets the "url" field.
func (auo *ActivityUpdateOne) SetURL(s string) *ActivityUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableURL(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// SetImageURL sets the "image_url" field.
func (auo *ActivityUpdateOne) SetImageURL(s string) *ActivityUpdateOne {
	auo.mutation.SetImageURL(s)
	return auo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableImageURL(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetImageURL(*s)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ActivityUpdateOne) SetCreatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreatedAt(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetShortSummary sets the "short_summary" field.
func (auo *ActivityUpdateOne) SetShortSummary(s string) *ActivityUpdateOne {
	auo.mutation.SetShortSummary(s)
	return auo
}

// SetNillableShortSummary sets the "short_summary" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableShortSummary(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetShortSummary(*s)
	}
	return auo
}

// SetFullSummary sets the "full_summary" field.
func (auo *ActivityUpdateOne) SetFullSummary(s string) *ActivityUpdateOne {
	auo.mutation.SetFullSummary(s)
	return auo
}

// SetNillableFullSummary sets the "full_summary" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableFullSummary(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetFullSummary(*s)
	}
	return auo
}

// SetRawJSON sets the "raw_json" field.
func (auo *ActivityUpdateOne) SetRawJSON(s string) *ActivityUpdateOne {
	auo.mutation.SetRawJSON(s)
	return auo
}

// SetNillableRawJSON sets the "raw_json" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableRawJSON(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetRawJSON(*s)
	}
	return auo
}

// SetEmbedding sets the "embedding" field.
func (auo *ActivityUpdateOne) SetEmbedding(pg pgvector.Vector) *ActivityUpdateOne {
	auo.mutation.SetEmbedding(pg)
	return auo
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableEmbedding(pg *pgvector.Vector) *ActivityUpdateOne {
	if pg != nil {
		auo.SetEmbedding(*pg)
	}
	return auo
}

// ClearEmbedding clears the value of the "embedding" field.
func (auo *ActivityUpdateOne) ClearEmbedding() *ActivityUpdateOne {
	auo.mutation.ClearEmbedding()
	return auo
}

// SetUpdateCount sets the "update_count" field.
func (auo *ActivityUpdateOne) SetUpdateCount(i int) *ActivityUpdateOne {
	auo.mutation.ResetUpdateCount()
	auo.mutation.SetUpdateCount(i)
	return auo
}

// SetNillableUpdateCount sets the "update_count" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUpdateCount(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetUpdateCount(*i)
	}
	return auo
}

// AddUpdateCount adds i to the "update_count" field.
func (auo *ActivityUpdateOne) AddUpdateCount(i int) *ActivityUpdateOne {
	auo.mutation.AddUpdateCount(i)
	return auo
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UID(); ok {
		_spec.SetField(activity.FieldUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.SourceUID(); ok {
		_spec.SetField(activity.FieldSourceUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.SourceType(); ok {
		_spec.SetField(activity.FieldSourceType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Body(); ok {
		_spec.SetField(activity.FieldBody, field.TypeString, value)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(activity.FieldURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.ImageURL(); ok {
		_spec.SetField(activity.FieldImageURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ShortSummary(); ok {
		_spec.SetField(activity.FieldShortSummary, field.TypeString, value)
	}
	if value, ok := auo.mutation.FullSummary(); ok {
		_spec.SetField(activity.FieldFullSummary, field.TypeString, value)
	}
	if value, ok := auo.mutation.RawJSON(); ok {
		_spec.SetField(activity.FieldRawJSON, field.TypeString, value)
	}
	if value, ok := auo.mutation.Embedding(); ok {
		_spec.SetField(activity.FieldEmbedding, field.TypeOther, value)
	}
	if auo.mutation.EmbeddingCleared() {
		_spec.ClearField(activity.FieldEmbedding, field.TypeOther)
	}
	if value, ok := auo.mutation.UpdateCount(); ok {
		_spec.SetField(activity.FieldUpdateCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedUpdateCount(); ok {
		_spec.AddField(activity.FieldUpdateCount, field.TypeInt, value)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
