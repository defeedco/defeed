// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/activity"
	pgvector "github.com/pgvector/pgvector-go"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// SourceUID holds the value of the "source_uid" field.
	SourceUID string `json:"source_uid,omitempty"`
	// SourceType holds the value of the "source_type" field.
	SourceType string `json:"source_type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ShortSummary holds the value of the "short_summary" field.
	ShortSummary string `json:"short_summary,omitempty"`
	// FullSummary holds the value of the "full_summary" field.
	FullSummary string `json:"full_summary,omitempty"`
	// RawJSON holds the value of the "raw_json" field.
	RawJSON string `json:"raw_json,omitempty"`
	// Embedding holds the value of the "embedding" field.
	Embedding *pgvector.Vector `json:"embedding,omitempty"`
	// UpdateCount holds the value of the "update_count" field.
	UpdateCount  int `json:"update_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldEmbedding:
			values[i] = &sql.NullScanner{S: new(pgvector.Vector)}
		case activity.FieldUpdateCount:
			values[i] = new(sql.NullInt64)
		case activity.FieldID, activity.FieldUID, activity.FieldSourceUID, activity.FieldSourceType, activity.FieldTitle, activity.FieldBody, activity.FieldURL, activity.FieldImageURL, activity.FieldShortSummary, activity.FieldFullSummary, activity.FieldRawJSON:
			values[i] = new(sql.NullString)
		case activity.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case activity.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				a.UID = value.String
			}
		case activity.FieldSourceUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_uid", values[i])
			} else if value.Valid {
				a.SourceUID = value.String
			}
		case activity.FieldSourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_type", values[i])
			} else if value.Valid {
				a.SourceType = value.String
			}
		case activity.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case activity.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				a.Body = value.String
			}
		case activity.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				a.URL = value.String
			}
		case activity.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				a.ImageURL = value.String
			}
		case activity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case activity.FieldShortSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_summary", values[i])
			} else if value.Valid {
				a.ShortSummary = value.String
			}
		case activity.FieldFullSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_summary", values[i])
			} else if value.Valid {
				a.FullSummary = value.String
			}
		case activity.FieldRawJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_json", values[i])
			} else if value.Valid {
				a.RawJSON = value.String
			}
		case activity.FieldEmbedding:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field embedding", values[i])
			} else if value.Valid {
				a.Embedding = new(pgvector.Vector)
				*a.Embedding = *value.S.(*pgvector.Vector)
			}
		case activity.FieldUpdateCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_count", values[i])
			} else if value.Valid {
				a.UpdateCount = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Activity.
// This includes values selected through modifiers, order, etc.
func (a *Activity) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return NewActivityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("uid=")
	builder.WriteString(a.UID)
	builder.WriteString(", ")
	builder.WriteString("source_uid=")
	builder.WriteString(a.SourceUID)
	builder.WriteString(", ")
	builder.WriteString("source_type=")
	builder.WriteString(a.SourceType)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(a.Body)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(a.URL)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(a.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("short_summary=")
	builder.WriteString(a.ShortSummary)
	builder.WriteString(", ")
	builder.WriteString("full_summary=")
	builder.WriteString(a.FullSummary)
	builder.WriteString(", ")
	builder.WriteString("raw_json=")
	builder.WriteString(a.RawJSON)
	builder.WriteString(", ")
	if v := a.Embedding; v != nil {
		builder.WriteString("embedding=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("update_count=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateCount))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity
