//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for HackernewsPostsConfigFeedName.
const (
	HackernewsPostsConfigFeedNameBest HackernewsPostsConfigFeedName = "best"
	HackernewsPostsConfigFeedNameNew  HackernewsPostsConfigFeedName = "new"
	HackernewsPostsConfigFeedNameTop  HackernewsPostsConfigFeedName = "top"
)

// Defines values for LobstersFeedConfigFeed.
const (
	Hottest LobstersFeedConfigFeed = "hottest"
	Newest  LobstersFeedConfigFeed = "newest"
)

// Defines values for RedditSubredditConfigSortBy.
const (
	RedditSubredditConfigSortByHot    RedditSubredditConfigSortBy = "hot"
	RedditSubredditConfigSortByNew    RedditSubredditConfigSortBy = "new"
	RedditSubredditConfigSortByRising RedditSubredditConfigSortBy = "rising"
	RedditSubredditConfigSortByTop    RedditSubredditConfigSortBy = "top"
)

// Defines values for RedditSubredditConfigTopPeriod.
const (
	All   RedditSubredditConfigTopPeriod = "all"
	Day   RedditSubredditConfigTopPeriod = "day"
	Hour  RedditSubredditConfigTopPeriod = "hour"
	Month RedditSubredditConfigTopPeriod = "month"
	Week  RedditSubredditConfigTopPeriod = "week"
	Year  RedditSubredditConfigTopPeriod = "year"
)

// Defines values for SourceType.
const (
	ChangedetectionWebsite SourceType = "changedetection_website"
	GithubIssues           SourceType = "github_issues"
	GithubReleases         SourceType = "github_releases"
	HackernewsPosts        SourceType = "hackernews_posts"
	LobstersFeed           SourceType = "lobsters_feed"
	LobstersTag            SourceType = "lobsters_tag"
	MastodonAccount        SourceType = "mastodon_account"
	MastodonTag            SourceType = "mastodon_tag"
	RedditSubreddit        SourceType = "reddit_subreddit"
	RssFeed                SourceType = "rss_feed"
)

// Defines values for SearchActivitiesParamsSortBy.
const (
	CreatedDate SearchActivitiesParamsSortBy = "created_date"
	Similarity  SearchActivitiesParamsSortBy = "similarity"
)

// Activity defines model for Activity.
type Activity struct {
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`

	// FullSummary One-paragraph markdown summary.
	FullSummary string `json:"full_summary"`
	ImageUrl    string `json:"image_url"`

	// ShortSummary One-line short plain text summary.
	ShortSummary string `json:"short_summary"`

	// Similarity Similarity score (0-1) when using semantic search
	Similarity *float32 `json:"similarity,omitempty"`
	SourceUid  string   `json:"source_uid"`
	Title      string   `json:"title"`
	Uid        string   `json:"uid"`
	Url        string   `json:"url"`
}

// ChangedetectionWebsiteConfig defines model for ChangedetectionWebsiteConfig.
type ChangedetectionWebsiteConfig struct {
	InstanceUrl *string `json:"instance_url,omitempty"`
	Limit       *int    `json:"limit,omitempty"`
	Token       *string `json:"token,omitempty"`
	Watch       string  `json:"watch"`
}

// CreateSourceRequest defines model for CreateSourceRequest.
type CreateSourceRequest struct {
	union json.RawMessage
}

// CreateSourceRequestChangedetectionWebsite defines model for CreateSourceRequestChangedetectionWebsite.
type CreateSourceRequestChangedetectionWebsite struct {
	ChangedetectionWebsite ChangedetectionWebsiteConfig `json:"changedetection_website"`
	Type                   SourceType                   `json:"type"`
}

// CreateSourceRequestGithubIssues defines model for CreateSourceRequestGithubIssues.
type CreateSourceRequestGithubIssues struct {
	GithubIssues GithubIssuesConfig `json:"github_issues"`
	Type         SourceType         `json:"type"`
}

// CreateSourceRequestGithubReleases defines model for CreateSourceRequestGithubReleases.
type CreateSourceRequestGithubReleases struct {
	GithubReleases GithubReleasesConfig `json:"github_releases"`
	Type           SourceType           `json:"type"`
}

// CreateSourceRequestHackernewsPosts defines model for CreateSourceRequestHackernewsPosts.
type CreateSourceRequestHackernewsPosts struct {
	HackernewsPosts HackernewsPostsConfig `json:"hackernews_posts"`
	Type            SourceType            `json:"type"`
}

// CreateSourceRequestLobstersFeed defines model for CreateSourceRequestLobstersFeed.
type CreateSourceRequestLobstersFeed struct {
	LobstersFeed LobstersFeedConfig `json:"lobsters_feed"`
	Type         SourceType         `json:"type"`
}

// CreateSourceRequestLobstersTag defines model for CreateSourceRequestLobstersTag.
type CreateSourceRequestLobstersTag struct {
	LobstersTag LobstersTagConfig `json:"lobsters_tag"`
	Type        SourceType        `json:"type"`
}

// CreateSourceRequestMastodonAccount defines model for CreateSourceRequestMastodonAccount.
type CreateSourceRequestMastodonAccount struct {
	MastodonAccount MastodonAccountConfig `json:"mastodon_account"`
	Type            SourceType            `json:"type"`
}

// CreateSourceRequestMastodonTag defines model for CreateSourceRequestMastodonTag.
type CreateSourceRequestMastodonTag struct {
	MastodonTag MastodonTagConfig `json:"mastodon_tag"`
	Type        SourceType        `json:"type"`
}

// CreateSourceRequestRedditSubreddit defines model for CreateSourceRequestRedditSubreddit.
type CreateSourceRequestRedditSubreddit struct {
	RedditSubreddit RedditSubredditConfig `json:"reddit_subreddit"`
	Type            SourceType            `json:"type"`
}

// CreateSourceRequestRssFeed defines model for CreateSourceRequestRssFeed.
type CreateSourceRequestRssFeed struct {
	RssFeed RssFeedConfig `json:"rss_feed"`
	Type    SourceType    `json:"type"`
}

// GithubIssuesConfig defines model for GithubIssuesConfig.
type GithubIssuesConfig struct {
	// Repository owner/repo
	Repository string  `json:"Repository"`
	Token      *string `json:"token,omitempty"`
}

// GithubReleasesConfig defines model for GithubReleasesConfig.
type GithubReleasesConfig struct {
	// Repository owner/repo
	Repository         string  `json:"Repository"`
	IncludePrereleases *bool   `json:"include_prereleases,omitempty"`
	Token              *string `json:"token,omitempty"`
}

// HackernewsPostsConfig defines model for HackernewsPostsConfig.
type HackernewsPostsConfig struct {
	FeedName HackernewsPostsConfigFeedName `json:"feed_name"`
}

// HackernewsPostsConfigFeedName defines model for HackernewsPostsConfig.FeedName.
type HackernewsPostsConfigFeedName string

// LobstersFeedConfig defines model for LobstersFeedConfig.
type LobstersFeedConfig struct {
	CustomUrl   *string                `json:"custom_url,omitempty"`
	Feed        LobstersFeedConfigFeed `json:"feed"`
	InstanceUrl string                 `json:"instance_url"`
}

// LobstersFeedConfigFeed defines model for LobstersFeedConfig.Feed.
type LobstersFeedConfigFeed string

// LobstersTagConfig defines model for LobstersTagConfig.
type LobstersTagConfig struct {
	CustomUrl   *string `json:"custom_url,omitempty"`
	InstanceUrl string  `json:"instance_url"`
	Tag         string  `json:"tag"`
}

// MastodonAccountConfig defines model for MastodonAccountConfig.
type MastodonAccountConfig struct {
	Account     string `json:"account"`
	InstanceUrl string `json:"instance_url"`
}

// MastodonTagConfig defines model for MastodonTagConfig.
type MastodonTagConfig struct {
	InstanceUrl string `json:"instance_url"`
	Tag         string `json:"tag"`
}

// RedditSubredditConfig defines model for RedditSubredditConfig.
type RedditSubredditConfig struct {
	Auth *struct {
		ID     *string `json:"ID,omitempty"`
		Name   *string `json:"name,omitempty"`
		Secret *string `json:"secret,omitempty"`
	} `json:"auth,omitempty"`
	RequestUrlTemplate *string                        `json:"request-url-template,omitempty"`
	Search             *string                        `json:"search,omitempty"`
	SortBy             RedditSubredditConfigSortBy    `json:"sort-by"`
	Subreddit          string                         `json:"subreddit"`
	TopPeriod          RedditSubredditConfigTopPeriod `json:"top-period"`
}

// RedditSubredditConfigSortBy defines model for RedditSubredditConfig.SortBy.
type RedditSubredditConfigSortBy string

// RedditSubredditConfigTopPeriod defines model for RedditSubredditConfig.TopPeriod.
type RedditSubredditConfigTopPeriod string

// RssFeedConfig defines model for RssFeedConfig.
type RssFeedConfig struct {
	Headers *map[string]string `json:"headers,omitempty"`
	Url     string             `json:"url"`
}

// Source defines model for Source.
type Source struct {
	Name string     `json:"name"`
	Type SourceType `json:"type"`
	Uid  string     `json:"uid"`
	Url  string     `json:"url"`
}

// SourceType defines model for SourceType.
type SourceType string

// SearchActivitiesParams defines parameters for SearchActivities.
type SearchActivitiesParams struct {
	// Query Semantic search query text
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Sources Filter by source UIDs (comma-separated)
	Sources *string `form:"sources,omitempty" json:"sources,omitempty"`

	// MinSimilarity Minimum similarity score (0-1). Can only be used when `query` is provided.
	MinSimilarity *float32 `form:"min_similarity,omitempty" json:"min_similarity,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Field to sort results by
	SortBy *SearchActivitiesParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// SearchActivitiesParamsSortBy defines parameters for SearchActivities.
type SearchActivitiesParamsSortBy string

// GetPageParams defines parameters for GetPage.
type GetPageParams struct {
	// Config Base64 encoded JSON string for feed config
	Config string `form:"config" json:"config"`
}

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody = CreateSourceRequest

// AsCreateSourceRequestMastodonAccount returns the union data inside the CreateSourceRequest as a CreateSourceRequestMastodonAccount
func (t CreateSourceRequest) AsCreateSourceRequestMastodonAccount() (CreateSourceRequestMastodonAccount, error) {
	var body CreateSourceRequestMastodonAccount
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestMastodonAccount overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestMastodonAccount
func (t *CreateSourceRequest) FromCreateSourceRequestMastodonAccount(v CreateSourceRequestMastodonAccount) error {
	v.Type = "mastodon_account"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestMastodonAccount performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestMastodonAccount
func (t *CreateSourceRequest) MergeCreateSourceRequestMastodonAccount(v CreateSourceRequestMastodonAccount) error {
	v.Type = "mastodon_account"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestMastodonTag returns the union data inside the CreateSourceRequest as a CreateSourceRequestMastodonTag
func (t CreateSourceRequest) AsCreateSourceRequestMastodonTag() (CreateSourceRequestMastodonTag, error) {
	var body CreateSourceRequestMastodonTag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestMastodonTag overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestMastodonTag
func (t *CreateSourceRequest) FromCreateSourceRequestMastodonTag(v CreateSourceRequestMastodonTag) error {
	v.Type = "mastodon_tag"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestMastodonTag performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestMastodonTag
func (t *CreateSourceRequest) MergeCreateSourceRequestMastodonTag(v CreateSourceRequestMastodonTag) error {
	v.Type = "mastodon_tag"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestHackernewsPosts returns the union data inside the CreateSourceRequest as a CreateSourceRequestHackernewsPosts
func (t CreateSourceRequest) AsCreateSourceRequestHackernewsPosts() (CreateSourceRequestHackernewsPosts, error) {
	var body CreateSourceRequestHackernewsPosts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestHackernewsPosts overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestHackernewsPosts
func (t *CreateSourceRequest) FromCreateSourceRequestHackernewsPosts(v CreateSourceRequestHackernewsPosts) error {
	v.Type = "hackernews_posts"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestHackernewsPosts performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestHackernewsPosts
func (t *CreateSourceRequest) MergeCreateSourceRequestHackernewsPosts(v CreateSourceRequestHackernewsPosts) error {
	v.Type = "hackernews_posts"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestRedditSubreddit returns the union data inside the CreateSourceRequest as a CreateSourceRequestRedditSubreddit
func (t CreateSourceRequest) AsCreateSourceRequestRedditSubreddit() (CreateSourceRequestRedditSubreddit, error) {
	var body CreateSourceRequestRedditSubreddit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestRedditSubreddit overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestRedditSubreddit
func (t *CreateSourceRequest) FromCreateSourceRequestRedditSubreddit(v CreateSourceRequestRedditSubreddit) error {
	v.Type = "reddit_subreddit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestRedditSubreddit performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestRedditSubreddit
func (t *CreateSourceRequest) MergeCreateSourceRequestRedditSubreddit(v CreateSourceRequestRedditSubreddit) error {
	v.Type = "reddit_subreddit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestLobstersTag returns the union data inside the CreateSourceRequest as a CreateSourceRequestLobstersTag
func (t CreateSourceRequest) AsCreateSourceRequestLobstersTag() (CreateSourceRequestLobstersTag, error) {
	var body CreateSourceRequestLobstersTag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestLobstersTag overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestLobstersTag
func (t *CreateSourceRequest) FromCreateSourceRequestLobstersTag(v CreateSourceRequestLobstersTag) error {
	v.Type = "lobsters_tag"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestLobstersTag performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestLobstersTag
func (t *CreateSourceRequest) MergeCreateSourceRequestLobstersTag(v CreateSourceRequestLobstersTag) error {
	v.Type = "lobsters_tag"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestLobstersFeed returns the union data inside the CreateSourceRequest as a CreateSourceRequestLobstersFeed
func (t CreateSourceRequest) AsCreateSourceRequestLobstersFeed() (CreateSourceRequestLobstersFeed, error) {
	var body CreateSourceRequestLobstersFeed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestLobstersFeed overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestLobstersFeed
func (t *CreateSourceRequest) FromCreateSourceRequestLobstersFeed(v CreateSourceRequestLobstersFeed) error {
	v.Type = "lobsters_feed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestLobstersFeed performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestLobstersFeed
func (t *CreateSourceRequest) MergeCreateSourceRequestLobstersFeed(v CreateSourceRequestLobstersFeed) error {
	v.Type = "lobsters_feed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestRssFeed returns the union data inside the CreateSourceRequest as a CreateSourceRequestRssFeed
func (t CreateSourceRequest) AsCreateSourceRequestRssFeed() (CreateSourceRequestRssFeed, error) {
	var body CreateSourceRequestRssFeed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestRssFeed overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestRssFeed
func (t *CreateSourceRequest) FromCreateSourceRequestRssFeed(v CreateSourceRequestRssFeed) error {
	v.Type = "rss_feed"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestRssFeed performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestRssFeed
func (t *CreateSourceRequest) MergeCreateSourceRequestRssFeed(v CreateSourceRequestRssFeed) error {
	v.Type = "rss_feed"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestGithubReleases returns the union data inside the CreateSourceRequest as a CreateSourceRequestGithubReleases
func (t CreateSourceRequest) AsCreateSourceRequestGithubReleases() (CreateSourceRequestGithubReleases, error) {
	var body CreateSourceRequestGithubReleases
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestGithubReleases overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestGithubReleases
func (t *CreateSourceRequest) FromCreateSourceRequestGithubReleases(v CreateSourceRequestGithubReleases) error {
	v.Type = "github_releases"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestGithubReleases performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestGithubReleases
func (t *CreateSourceRequest) MergeCreateSourceRequestGithubReleases(v CreateSourceRequestGithubReleases) error {
	v.Type = "github_releases"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestGithubIssues returns the union data inside the CreateSourceRequest as a CreateSourceRequestGithubIssues
func (t CreateSourceRequest) AsCreateSourceRequestGithubIssues() (CreateSourceRequestGithubIssues, error) {
	var body CreateSourceRequestGithubIssues
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestGithubIssues overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestGithubIssues
func (t *CreateSourceRequest) FromCreateSourceRequestGithubIssues(v CreateSourceRequestGithubIssues) error {
	v.Type = "github_issues"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestGithubIssues performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestGithubIssues
func (t *CreateSourceRequest) MergeCreateSourceRequestGithubIssues(v CreateSourceRequestGithubIssues) error {
	v.Type = "github_issues"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateSourceRequestChangedetectionWebsite returns the union data inside the CreateSourceRequest as a CreateSourceRequestChangedetectionWebsite
func (t CreateSourceRequest) AsCreateSourceRequestChangedetectionWebsite() (CreateSourceRequestChangedetectionWebsite, error) {
	var body CreateSourceRequestChangedetectionWebsite
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateSourceRequestChangedetectionWebsite overwrites any union data inside the CreateSourceRequest as the provided CreateSourceRequestChangedetectionWebsite
func (t *CreateSourceRequest) FromCreateSourceRequestChangedetectionWebsite(v CreateSourceRequestChangedetectionWebsite) error {
	v.Type = "changedetection_website"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateSourceRequestChangedetectionWebsite performs a merge with any union data inside the CreateSourceRequest, using the provided CreateSourceRequestChangedetectionWebsite
func (t *CreateSourceRequest) MergeCreateSourceRequestChangedetectionWebsite(v CreateSourceRequestChangedetectionWebsite) error {
	v.Type = "changedetection_website"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateSourceRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateSourceRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "changedetection_website":
		return t.AsCreateSourceRequestChangedetectionWebsite()
	case "github_issues":
		return t.AsCreateSourceRequestGithubIssues()
	case "github_releases":
		return t.AsCreateSourceRequestGithubReleases()
	case "hackernews_posts":
		return t.AsCreateSourceRequestHackernewsPosts()
	case "lobsters_feed":
		return t.AsCreateSourceRequestLobstersFeed()
	case "lobsters_tag":
		return t.AsCreateSourceRequestLobstersTag()
	case "mastodon_account":
		return t.AsCreateSourceRequestMastodonAccount()
	case "mastodon_tag":
		return t.AsCreateSourceRequestMastodonTag()
	case "reddit_subreddit":
		return t.AsCreateSourceRequestRedditSubreddit()
	case "rss_feed":
		return t.AsCreateSourceRequestRssFeed()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateSourceRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateSourceRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search activities
	// (GET /activities/search)
	SearchActivities(w http.ResponseWriter, r *http.Request, params SearchActivitiesParams)
	// Get page HTML
	// (GET /page)
	GetPage(w http.ResponseWriter, r *http.Request, params GetPageParams)
	// List all sources
	// (GET /sources)
	ListSources(w http.ResponseWriter, r *http.Request)
	// Create a new source
	// (POST /sources)
	CreateSource(w http.ResponseWriter, r *http.Request)
	// List all activities
	// (GET /sources/activities)
	ListAllActivities(w http.ResponseWriter, r *http.Request)
	// Delete source
	// (DELETE /sources/{uid})
	DeleteSource(w http.ResponseWriter, r *http.Request, uid string)
	// Get source by UID
	// (GET /sources/{uid})
	GetSource(w http.ResponseWriter, r *http.Request, uid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SearchActivities operation middleware
func (siw *ServerInterfaceWrapper) SearchActivities(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchActivitiesParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "sources" -------------

	err = runtime.BindQueryParameter("form", true, false, "sources", r.URL.Query(), &params.Sources)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sources", Err: err})
		return
	}

	// ------------- Optional query parameter "min_similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_similarity", r.URL.Query(), &params.MinSimilarity)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "min_similarity", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchActivities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPage operation middleware
func (siw *ServerInterfaceWrapper) GetPage(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPageParams

	// ------------- Required query parameter "config" -------------

	if paramValue := r.URL.Query().Get("config"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "config"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "config", r.URL.Query(), &params.Config)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "config", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSources operation middleware
func (siw *ServerInterfaceWrapper) ListSources(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSources(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSource operation middleware
func (siw *ServerInterfaceWrapper) CreateSource(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSource(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAllActivities operation middleware
func (siw *ServerInterfaceWrapper) ListAllActivities(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllActivities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSource operation middleware
func (siw *ServerInterfaceWrapper) DeleteSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSource(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSource operation middleware
func (siw *ServerInterfaceWrapper) GetSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSource(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/activities/search", wrapper.SearchActivities)
	m.HandleFunc("GET "+options.BaseURL+"/page", wrapper.GetPage)
	m.HandleFunc("GET "+options.BaseURL+"/sources", wrapper.ListSources)
	m.HandleFunc("POST "+options.BaseURL+"/sources", wrapper.CreateSource)
	m.HandleFunc("GET "+options.BaseURL+"/sources/activities", wrapper.ListAllActivities)
	m.HandleFunc("DELETE "+options.BaseURL+"/sources/{uid}", wrapper.DeleteSource)
	m.HandleFunc("GET "+options.BaseURL+"/sources/{uid}", wrapper.GetSource)

	return m
}
