//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for SourceType.
const (
	ChangedetectionWebsite SourceType = "changedetection_website"
	GithubIssues           SourceType = "github_issues"
	GithubReleases         SourceType = "github_releases"
	HackernewsPosts        SourceType = "hackernews_posts"
	LobstersFeed           SourceType = "lobsters_feed"
	LobstersTag            SourceType = "lobsters_tag"
	MastodonAccount        SourceType = "mastodon_account"
	MastodonTag            SourceType = "mastodon_tag"
	RedditSubreddit        SourceType = "reddit_subreddit"
	RssFeed                SourceType = "rss_feed"
)

// Defines values for SearchActivitiesParamsSortBy.
const (
	CreatedDate SearchActivitiesParamsSortBy = "created_date"
	Similarity  SearchActivitiesParamsSortBy = "similarity"
)

// Activity defines model for Activity.
type Activity struct {
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`

	// FullSummary One-paragraph markdown summary.
	FullSummary string `json:"full_summary"`
	ImageUrl    string `json:"image_url"`

	// ShortSummary One-line short plain text summary.
	ShortSummary string `json:"short_summary"`

	// Similarity Similarity score (0-1) when using semantic search
	Similarity *float32 `json:"similarity,omitempty"`
	SourceUid  string   `json:"source_uid"`
	Title      string   `json:"title"`
	Uid        string   `json:"uid"`
	Url        string   `json:"url"`
}

// CreateSourceRequest defines model for CreateSourceRequest.
type CreateSourceRequest struct {
	Config map[string]interface{} `json:"config"`
	Type   SourceType             `json:"type"`
}

// Source defines model for Source.
type Source struct {
	Name string     `json:"name"`
	Type SourceType `json:"type"`
	Uid  string     `json:"uid"`
	Url  string     `json:"url"`
}

// SourceType defines model for SourceType.
type SourceType string

// SearchActivitiesParams defines parameters for SearchActivities.
type SearchActivitiesParams struct {
	// Query Semantic search query text
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Sources Filter by source UIDs (comma-separated)
	Sources *string `form:"sources,omitempty" json:"sources,omitempty"`

	// MinSimilarity Minimum similarity score (0-1). Can only be used when `query` is provided.
	MinSimilarity *float32 `form:"min_similarity,omitempty" json:"min_similarity,omitempty"`

	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Field to sort results by
	SortBy *SearchActivitiesParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// SearchActivitiesParamsSortBy defines parameters for SearchActivities.
type SearchActivitiesParamsSortBy string

// GetPageParams defines parameters for GetPage.
type GetPageParams struct {
	// Config Base64 encoded JSON string for feed config
	Config string `form:"config" json:"config"`
}

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody = CreateSourceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search activities
	// (GET /activities/search)
	SearchActivities(w http.ResponseWriter, r *http.Request, params SearchActivitiesParams)
	// Get page HTML
	// (GET /page)
	GetPage(w http.ResponseWriter, r *http.Request, params GetPageParams)
	// List all sources
	// (GET /sources)
	ListSources(w http.ResponseWriter, r *http.Request)
	// Create a new source
	// (POST /sources)
	CreateSource(w http.ResponseWriter, r *http.Request)
	// List all activities
	// (GET /sources/activities)
	ListAllActivities(w http.ResponseWriter, r *http.Request)
	// Delete source
	// (DELETE /sources/{uid})
	DeleteSource(w http.ResponseWriter, r *http.Request, uid string)
	// Get source by UID
	// (GET /sources/{uid})
	GetSource(w http.ResponseWriter, r *http.Request, uid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SearchActivities operation middleware
func (siw *ServerInterfaceWrapper) SearchActivities(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchActivitiesParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "sources" -------------

	err = runtime.BindQueryParameter("form", true, false, "sources", r.URL.Query(), &params.Sources)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sources", Err: err})
		return
	}

	// ------------- Optional query parameter "min_similarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_similarity", r.URL.Query(), &params.MinSimilarity)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "min_similarity", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchActivities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPage operation middleware
func (siw *ServerInterfaceWrapper) GetPage(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPageParams

	// ------------- Required query parameter "config" -------------

	if paramValue := r.URL.Query().Get("config"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "config"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "config", r.URL.Query(), &params.Config)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "config", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSources operation middleware
func (siw *ServerInterfaceWrapper) ListSources(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSources(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSource operation middleware
func (siw *ServerInterfaceWrapper) CreateSource(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSource(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAllActivities operation middleware
func (siw *ServerInterfaceWrapper) ListAllActivities(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllActivities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSource operation middleware
func (siw *ServerInterfaceWrapper) DeleteSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSource(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSource operation middleware
func (siw *ServerInterfaceWrapper) GetSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSource(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/activities/search", wrapper.SearchActivities)
	m.HandleFunc("GET "+options.BaseURL+"/page", wrapper.GetPage)
	m.HandleFunc("GET "+options.BaseURL+"/sources", wrapper.ListSources)
	m.HandleFunc("POST "+options.BaseURL+"/sources", wrapper.CreateSource)
	m.HandleFunc("GET "+options.BaseURL+"/sources/activities", wrapper.ListAllActivities)
	m.HandleFunc("DELETE "+options.BaseURL+"/sources/{uid}", wrapper.DeleteSource)
	m.HandleFunc("GET "+options.BaseURL+"/sources/{uid}", wrapper.GetSource)

	return m
}
