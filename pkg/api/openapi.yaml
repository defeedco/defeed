openapi: 3.0.0
info:
  title: Pulse Feed Aggregation API
  version: 1.0.0
  description: API for managing feed sources and retrieving aggregated content

servers:
  - url: http://localhost:8080

paths:
  /sources:
    post:
      summary: Create a new source
      operationId: createSource
      tags:
        - sources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSourceRequest'
      responses:
        '201':
          description: Source created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          description: Invalid request
        '409':
          description: Source already exists
    get:
      summary: List all sources
      operationId: listSources
      tags:
        - sources
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'

  /sources/{uid}:
    get:
      summary: Get source by UID
      operationId: getSource
      tags:
        - sources
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Source details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
    delete:
      summary: Delete source
      operationId: deleteSource
      tags:
        - sources
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Source deleted successfully
        '404':
          description: Source not found

  /sources/activities:
    get:
      summary: List all activities
      operationId: listAllActivities
      tags:
        - activities
      responses:
        '200':
          description: Activities list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'

  /activities/search:
    get:
      summary: Search activities
      operationId: searchActivities
      tags:
        - activities
      parameters:
        - name: query
          in: query
          description: Semantic search query text
          schema:
            type: string
        - name: sources
          in: query
          description: Filter by source UIDs (comma-separated)
          schema:
            type: string
        - name: minSimilarity
          in: query
          description: Minimum similarity score (0-1). Can only be used when `query` is provided.
          schema:
            type: number
            format: float
            minimum: 0
            maximum: 1
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          description: Field to sort results by
          schema:
            type: string
            enum: [similarity, created_date]
            default: similarity
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'

  /page:
    get:
      summary: Get page HTML
      operationId: getPage
      tags:
        - pages
      parameters:
        - name: config
          in: query
          required: true
          description: Base64 encoded JSON string for feed config
          schema:
            type: string
      responses:
        '200':
          description: HTML content
          content:
            text/html:
              schema:
                type: string

components:
  schemas:
    CreateSourceRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateSourceRequestMastodonAccount'
        - $ref: '#/components/schemas/CreateSourceRequestMastodonTag'
        - $ref: '#/components/schemas/CreateSourceRequestHackernewsPosts'
        - $ref: '#/components/schemas/CreateSourceRequestRedditSubreddit'
        - $ref: '#/components/schemas/CreateSourceRequestLobstersTag'
        - $ref: '#/components/schemas/CreateSourceRequestLobstersFeed'
        - $ref: '#/components/schemas/CreateSourceRequestRssFeed'
        - $ref: '#/components/schemas/CreateSourceRequestGithubReleases'
        - $ref: '#/components/schemas/CreateSourceRequestGithubIssues'
        - $ref: '#/components/schemas/CreateSourceRequestChangedetectionWebsite'
      discriminator:
        propertyName: type
        mapping:
          mastodon_account: '#/components/schemas/CreateSourceRequestMastodonAccount'
          mastodon_tag: '#/components/schemas/CreateSourceRequestMastodonTag'
          hackernews_posts: '#/components/schemas/CreateSourceRequestHackernewsPosts'
          reddit_subreddit: '#/components/schemas/CreateSourceRequestRedditSubreddit'
          lobsters_tag: '#/components/schemas/CreateSourceRequestLobstersTag'
          lobsters_feed: '#/components/schemas/CreateSourceRequestLobstersFeed'
          rss_feed: '#/components/schemas/CreateSourceRequestRssFeed'
          github_releases: '#/components/schemas/CreateSourceRequestGithubReleases'
          github_issues: '#/components/schemas/CreateSourceRequestGithubIssues'
          changedetection_website: '#/components/schemas/CreateSourceRequestChangedetectionWebsite'

    CreateSourceRequestMastodonAccount:
      type: object
      required: [type, mastodon_account]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        mastodon_account:
          $ref: '#/components/schemas/MastodonAccountConfig'

    CreateSourceRequestMastodonTag:
      type: object
      required: [type, mastodon_tag]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        mastodon_tag:
          $ref: '#/components/schemas/MastodonTagConfig'

    CreateSourceRequestHackernewsPosts:
      type: object
      required: [type, hackernews_posts]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        hackernews_posts:
          $ref: '#/components/schemas/HackernewsPostsConfig'

    CreateSourceRequestRedditSubreddit:
      type: object
      required: [type, reddit_subreddit]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        reddit_subreddit:
          $ref: '#/components/schemas/RedditSubredditConfig'

    CreateSourceRequestLobstersTag:
      type: object
      required: [type, lobsters_tag]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        lobsters_tag:
          $ref: '#/components/schemas/LobstersTagConfig'

    CreateSourceRequestLobstersFeed:
      type: object
      required: [type, lobsters_feed]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        lobsters_feed:
          $ref: '#/components/schemas/LobstersFeedConfig'

    CreateSourceRequestRssFeed:
      type: object
      required: [type, rss_feed]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        rss_feed:
          $ref: '#/components/schemas/RssFeedConfig'

    CreateSourceRequestGithubReleases:
      type: object
      required: [type, github_releases]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        github_releases:
          $ref: '#/components/schemas/GithubReleasesConfig'

    CreateSourceRequestGithubIssues:
      type: object
      required: [type, github_issues]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        github_issues:
          $ref: '#/components/schemas/GithubIssuesConfig'

    CreateSourceRequestChangedetectionWebsite:
      type: object
      required: [type, changedetection_website]
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        changedetection_website:
          $ref: '#/components/schemas/ChangedetectionWebsiteConfig'

    MastodonAccountConfig:
      type: object
      required: [instanceUrl, account]
      properties:
        instanceUrl:
          type: string
        account:
          type: string

    MastodonTagConfig:
      type: object
      required: [instanceUrl, tag]
      properties:
        instanceUrl:
          type: string
        tag:
          type: string

    HackernewsPostsConfig:
      type: object
      required: [feedName]
      properties:
        feedName:
          type: string
          enum: [top, new, best]

    RedditSubredditConfig:
      type: object
      required: [subreddit, sortBy, topPeriod]
      properties:
        subreddit:
          type: string
        sortBy:
          type: string
          enum: [hot, new, top, rising]
        topPeriod:
          type: string
          enum: [hour, day, week, month, year, all]
        search:
          type: string
        auth:
          type: object
          properties:
            name:
              type: string
            ID:
              type: string
            secret:
              type: string

    LobstersTagConfig:
      type: object
      required: [instanceUrl, tag]
      properties:
        instanceUrl:
          type: string
        customUrl:
          type: string
        tag:
          type: string

    LobstersFeedConfig:
      type: object
      required: [instanceUrl, feed]
      properties:
        instanceUrl:
          type: string
        customUrl:
          type: string
        feed:
          type: string
          enum: [hottest, newest]

    RssFeedConfig:
      type: object
      required: [url]
      properties:
        url:
          type: string
          format: uri
        headers:
          type: object
          additionalProperties:
            type: string

    GithubReleasesConfig:
      type: object
      required: [repository]
      properties:
        repository:
          type: string
          description: owner/repo
        token:
          type: string
        includePrereleases:
          type: boolean

    GithubIssuesConfig:
      type: object
      required: [repository]
      properties:
        repository:
          type: string
          description: owner/repo
        token:
          type: string

    ChangedetectionWebsiteConfig:
      type: object
      required: [watch]
      properties:
        watch:
          type: string
        instanceUrl:
          type: string
        token:
          type: string
        limit:
          type: integer

    Source:
      type: object
      required:
        - uid
        - type
        - name
        - url
      properties:
        uid:
          type: string
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        url:
          type: string

    SourceType:
      type: string
      enum:
        - mastodon_account
        - mastodon_tag
        - hackernews_posts
        - reddit_subreddit
        - lobsters_tag
        - lobsters_feed
        - rss_feed
        - github_releases
        - github_issues
        - changedetection_website

    Activity:
      type: object
      required:
        - uid
        - sourceUid
        - title
        - shortSummary
        - fullSummary
        - body
        - url
        - imageUrl
        - createdAt
      properties:
        uid:
          type: string
        sourceUid:
          type: string
        title:
          type: string
        shortSummary:
          type: string
          description: One-line short plain text summary.
        fullSummary:
          type: string
          description: One-paragraph markdown summary.
        body:
          type: string
        url:
          type: string
          format: url
        imageUrl:
          type: string
          format: url
        createdAt:
          type: string
          format: date-time
        similarity:
          type: number
          format: float
          description: Similarity score (0-1) when using semantic search
